/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 378.0, "minX": 0.0, "maxY": 3395.0, "series": [{"data": [[0.0, 378.0], [0.1, 386.0], [0.2, 387.0], [0.3, 388.0], [0.4, 389.0], [0.5, 390.0], [0.6, 391.0], [0.7, 391.0], [0.8, 392.0], [0.9, 393.0], [1.0, 394.0], [1.1, 395.0], [1.2, 396.0], [1.3, 396.0], [1.4, 397.0], [1.5, 398.0], [1.6, 399.0], [1.7, 401.0], [1.8, 402.0], [1.9, 404.0], [2.0, 407.0], [2.1, 410.0], [2.2, 413.0], [2.3, 419.0], [2.4, 423.0], [2.5, 426.0], [2.6, 429.0], [2.7, 430.0], [2.8, 432.0], [2.9, 434.0], [3.0, 435.0], [3.1, 436.0], [3.2, 437.0], [3.3, 438.0], [3.4, 441.0], [3.5, 443.0], [3.6, 446.0], [3.7, 449.0], [3.8, 453.0], [3.9, 458.0], [4.0, 464.0], [4.1, 471.0], [4.2, 478.0], [4.3, 485.0], [4.4, 489.0], [4.5, 491.0], [4.6, 492.0], [4.7, 495.0], [4.8, 497.0], [4.9, 498.0], [5.0, 502.0], [5.1, 506.0], [5.2, 512.0], [5.3, 521.0], [5.4, 526.0], [5.5, 530.0], [5.6, 532.0], [5.7, 535.0], [5.8, 538.0], [5.9, 540.0], [6.0, 544.0], [6.1, 548.0], [6.2, 551.0], [6.3, 555.0], [6.4, 558.0], [6.5, 561.0], [6.6, 569.0], [6.7, 585.0], [6.8, 597.0], [6.9, 606.0], [7.0, 615.0], [7.1, 634.0], [7.2, 641.0], [7.3, 646.0], [7.4, 649.0], [7.5, 652.0], [7.6, 655.0], [7.7, 659.0], [7.8, 663.0], [7.9, 667.0], [8.0, 673.0], [8.1, 683.0], [8.2, 687.0], [8.3, 688.0], [8.4, 689.0], [8.5, 689.0], [8.6, 689.0], [8.7, 690.0], [8.8, 690.0], [8.9, 690.0], [9.0, 690.0], [9.1, 690.0], [9.2, 691.0], [9.3, 691.0], [9.4, 691.0], [9.5, 691.0], [9.6, 691.0], [9.7, 691.0], [9.8, 691.0], [9.9, 692.0], [10.0, 692.0], [10.1, 692.0], [10.2, 692.0], [10.3, 692.0], [10.4, 692.0], [10.5, 692.0], [10.6, 692.0], [10.7, 692.0], [10.8, 692.0], [10.9, 693.0], [11.0, 693.0], [11.1, 693.0], [11.2, 693.0], [11.3, 693.0], [11.4, 693.0], [11.5, 693.0], [11.6, 693.0], [11.7, 693.0], [11.8, 693.0], [11.9, 693.0], [12.0, 693.0], [12.1, 693.0], [12.2, 693.0], [12.3, 694.0], [12.4, 694.0], [12.5, 694.0], [12.6, 694.0], [12.7, 694.0], [12.8, 694.0], [12.9, 694.0], [13.0, 694.0], [13.1, 694.0], [13.2, 694.0], [13.3, 694.0], [13.4, 694.0], [13.5, 694.0], [13.6, 694.0], [13.7, 694.0], [13.8, 694.0], [13.9, 694.0], [14.0, 694.0], [14.1, 694.0], [14.2, 695.0], [14.3, 695.0], [14.4, 695.0], [14.5, 695.0], [14.6, 695.0], [14.7, 695.0], [14.8, 695.0], [14.9, 695.0], [15.0, 695.0], [15.1, 695.0], [15.2, 695.0], [15.3, 695.0], [15.4, 695.0], [15.5, 695.0], [15.6, 695.0], [15.7, 695.0], [15.8, 695.0], [15.9, 695.0], [16.0, 695.0], [16.1, 695.0], [16.2, 695.0], [16.3, 695.0], [16.4, 695.0], [16.5, 695.0], [16.6, 695.0], [16.7, 696.0], [16.8, 696.0], [16.9, 696.0], [17.0, 696.0], [17.1, 696.0], [17.2, 696.0], [17.3, 696.0], [17.4, 696.0], [17.5, 696.0], [17.6, 696.0], [17.7, 696.0], [17.8, 696.0], [17.9, 696.0], [18.0, 696.0], [18.1, 696.0], [18.2, 696.0], [18.3, 696.0], [18.4, 696.0], [18.5, 696.0], [18.6, 696.0], [18.7, 696.0], [18.8, 696.0], [18.9, 696.0], [19.0, 696.0], [19.1, 696.0], [19.2, 696.0], [19.3, 696.0], [19.4, 696.0], [19.5, 696.0], [19.6, 696.0], [19.7, 696.0], [19.8, 697.0], [19.9, 697.0], [20.0, 697.0], [20.1, 697.0], [20.2, 697.0], [20.3, 697.0], [20.4, 697.0], [20.5, 697.0], [20.6, 697.0], [20.7, 697.0], [20.8, 697.0], [20.9, 697.0], [21.0, 697.0], [21.1, 697.0], [21.2, 697.0], [21.3, 697.0], [21.4, 697.0], [21.5, 697.0], [21.6, 697.0], [21.7, 697.0], [21.8, 697.0], [21.9, 697.0], [22.0, 697.0], [22.1, 697.0], [22.2, 697.0], [22.3, 697.0], [22.4, 697.0], [22.5, 697.0], [22.6, 697.0], [22.7, 697.0], [22.8, 697.0], [22.9, 697.0], [23.0, 697.0], [23.1, 698.0], [23.2, 698.0], [23.3, 698.0], [23.4, 698.0], [23.5, 698.0], [23.6, 698.0], [23.7, 698.0], [23.8, 698.0], [23.9, 698.0], [24.0, 698.0], [24.1, 698.0], [24.2, 698.0], [24.3, 698.0], [24.4, 698.0], [24.5, 698.0], [24.6, 698.0], [24.7, 698.0], [24.8, 698.0], [24.9, 698.0], [25.0, 698.0], [25.1, 698.0], [25.2, 698.0], [25.3, 698.0], [25.4, 698.0], [25.5, 698.0], [25.6, 698.0], [25.7, 698.0], [25.8, 698.0], [25.9, 698.0], [26.0, 698.0], [26.1, 698.0], [26.2, 698.0], [26.3, 698.0], [26.4, 698.0], [26.5, 698.0], [26.6, 698.0], [26.7, 698.0], [26.8, 699.0], [26.9, 699.0], [27.0, 699.0], [27.1, 699.0], [27.2, 699.0], [27.3, 699.0], [27.4, 699.0], [27.5, 699.0], [27.6, 699.0], [27.7, 699.0], [27.8, 699.0], [27.9, 699.0], [28.0, 699.0], [28.1, 699.0], [28.2, 699.0], [28.3, 699.0], [28.4, 699.0], [28.5, 699.0], [28.6, 699.0], [28.7, 699.0], [28.8, 699.0], [28.9, 699.0], [29.0, 699.0], [29.1, 699.0], [29.2, 699.0], [29.3, 699.0], [29.4, 699.0], [29.5, 699.0], [29.6, 699.0], [29.7, 699.0], [29.8, 699.0], [29.9, 699.0], [30.0, 699.0], [30.1, 699.0], [30.2, 699.0], [30.3, 699.0], [30.4, 699.0], [30.5, 699.0], [30.6, 699.0], [30.7, 699.0], [30.8, 700.0], [30.9, 700.0], [31.0, 700.0], [31.1, 700.0], [31.2, 700.0], [31.3, 700.0], [31.4, 700.0], [31.5, 700.0], [31.6, 700.0], [31.7, 700.0], [31.8, 700.0], [31.9, 700.0], [32.0, 700.0], [32.1, 700.0], [32.2, 700.0], [32.3, 700.0], [32.4, 700.0], [32.5, 700.0], [32.6, 700.0], [32.7, 700.0], [32.8, 700.0], [32.9, 700.0], [33.0, 700.0], [33.1, 700.0], [33.2, 700.0], [33.3, 700.0], [33.4, 700.0], [33.5, 700.0], [33.6, 700.0], [33.7, 700.0], [33.8, 700.0], [33.9, 700.0], [34.0, 700.0], [34.1, 700.0], [34.2, 700.0], [34.3, 700.0], [34.4, 700.0], [34.5, 700.0], [34.6, 700.0], [34.7, 700.0], [34.8, 700.0], [34.9, 700.0], [35.0, 700.0], [35.1, 701.0], [35.2, 701.0], [35.3, 701.0], [35.4, 701.0], [35.5, 701.0], [35.6, 701.0], [35.7, 701.0], [35.8, 701.0], [35.9, 701.0], [36.0, 701.0], [36.1, 701.0], [36.2, 701.0], [36.3, 701.0], [36.4, 701.0], [36.5, 701.0], [36.6, 701.0], [36.7, 701.0], [36.8, 701.0], [36.9, 701.0], [37.0, 701.0], [37.1, 701.0], [37.2, 701.0], [37.3, 701.0], [37.4, 701.0], [37.5, 701.0], [37.6, 701.0], [37.7, 701.0], [37.8, 701.0], [37.9, 701.0], [38.0, 701.0], [38.1, 701.0], [38.2, 701.0], [38.3, 701.0], [38.4, 701.0], [38.5, 701.0], [38.6, 701.0], [38.7, 701.0], [38.8, 701.0], [38.9, 701.0], [39.0, 701.0], [39.1, 702.0], [39.2, 702.0], [39.3, 702.0], [39.4, 702.0], [39.5, 702.0], [39.6, 702.0], [39.7, 702.0], [39.8, 702.0], [39.9, 702.0], [40.0, 702.0], [40.1, 702.0], [40.2, 702.0], [40.3, 702.0], [40.4, 702.0], [40.5, 702.0], [40.6, 702.0], [40.7, 702.0], [40.8, 702.0], [40.9, 702.0], [41.0, 702.0], [41.1, 702.0], [41.2, 702.0], [41.3, 702.0], [41.4, 702.0], [41.5, 702.0], [41.6, 702.0], [41.7, 702.0], [41.8, 702.0], [41.9, 702.0], [42.0, 702.0], [42.1, 702.0], [42.2, 702.0], [42.3, 702.0], [42.4, 702.0], [42.5, 702.0], [42.6, 702.0], [42.7, 702.0], [42.8, 702.0], [42.9, 702.0], [43.0, 702.0], [43.1, 702.0], [43.2, 703.0], [43.3, 703.0], [43.4, 703.0], [43.5, 703.0], [43.6, 703.0], [43.7, 703.0], [43.8, 703.0], [43.9, 703.0], [44.0, 703.0], [44.1, 703.0], [44.2, 703.0], [44.3, 703.0], [44.4, 703.0], [44.5, 703.0], [44.6, 703.0], [44.7, 703.0], [44.8, 703.0], [44.9, 703.0], [45.0, 703.0], [45.1, 703.0], [45.2, 703.0], [45.3, 703.0], [45.4, 703.0], [45.5, 703.0], [45.6, 703.0], [45.7, 703.0], [45.8, 703.0], [45.9, 703.0], [46.0, 703.0], [46.1, 703.0], [46.2, 703.0], [46.3, 703.0], [46.4, 703.0], [46.5, 703.0], [46.6, 703.0], [46.7, 703.0], [46.8, 703.0], [46.9, 703.0], [47.0, 703.0], [47.1, 703.0], [47.2, 703.0], [47.3, 704.0], [47.4, 704.0], [47.5, 704.0], [47.6, 704.0], [47.7, 704.0], [47.8, 704.0], [47.9, 704.0], [48.0, 704.0], [48.1, 704.0], [48.2, 704.0], [48.3, 704.0], [48.4, 704.0], [48.5, 704.0], [48.6, 704.0], [48.7, 704.0], [48.8, 704.0], [48.9, 704.0], [49.0, 704.0], [49.1, 704.0], [49.2, 704.0], [49.3, 704.0], [49.4, 704.0], [49.5, 704.0], [49.6, 704.0], [49.7, 704.0], [49.8, 704.0], [49.9, 704.0], [50.0, 704.0], [50.1, 704.0], [50.2, 704.0], [50.3, 704.0], [50.4, 704.0], [50.5, 704.0], [50.6, 704.0], [50.7, 704.0], [50.8, 705.0], [50.9, 705.0], [51.0, 705.0], [51.1, 705.0], [51.2, 705.0], [51.3, 705.0], [51.4, 705.0], [51.5, 705.0], [51.6, 705.0], [51.7, 705.0], [51.8, 705.0], [51.9, 705.0], [52.0, 705.0], [52.1, 705.0], [52.2, 705.0], [52.3, 705.0], [52.4, 705.0], [52.5, 705.0], [52.6, 705.0], [52.7, 705.0], [52.8, 705.0], [52.9, 705.0], [53.0, 705.0], [53.1, 705.0], [53.2, 705.0], [53.3, 705.0], [53.4, 705.0], [53.5, 705.0], [53.6, 705.0], [53.7, 705.0], [53.8, 705.0], [53.9, 705.0], [54.0, 705.0], [54.1, 705.0], [54.2, 706.0], [54.3, 706.0], [54.4, 706.0], [54.5, 706.0], [54.6, 706.0], [54.7, 706.0], [54.8, 706.0], [54.9, 706.0], [55.0, 706.0], [55.1, 706.0], [55.2, 706.0], [55.3, 706.0], [55.4, 706.0], [55.5, 706.0], [55.6, 706.0], [55.7, 706.0], [55.8, 706.0], [55.9, 706.0], [56.0, 706.0], [56.1, 706.0], [56.2, 706.0], [56.3, 706.0], [56.4, 706.0], [56.5, 706.0], [56.6, 706.0], [56.7, 706.0], [56.8, 706.0], [56.9, 706.0], [57.0, 706.0], [57.1, 706.0], [57.2, 707.0], [57.3, 707.0], [57.4, 707.0], [57.5, 707.0], [57.6, 707.0], [57.7, 707.0], [57.8, 707.0], [57.9, 707.0], [58.0, 707.0], [58.1, 707.0], [58.2, 707.0], [58.3, 707.0], [58.4, 707.0], [58.5, 707.0], [58.6, 707.0], [58.7, 707.0], [58.8, 707.0], [58.9, 707.0], [59.0, 707.0], [59.1, 707.0], [59.2, 707.0], [59.3, 707.0], [59.4, 707.0], [59.5, 707.0], [59.6, 707.0], [59.7, 707.0], [59.8, 708.0], [59.9, 708.0], [60.0, 708.0], [60.1, 708.0], [60.2, 708.0], [60.3, 708.0], [60.4, 708.0], [60.5, 708.0], [60.6, 708.0], [60.7, 708.0], [60.8, 708.0], [60.9, 708.0], [61.0, 708.0], [61.1, 708.0], [61.2, 708.0], [61.3, 708.0], [61.4, 708.0], [61.5, 708.0], [61.6, 708.0], [61.7, 708.0], [61.8, 708.0], [61.9, 708.0], [62.0, 708.0], [62.1, 709.0], [62.2, 709.0], [62.3, 709.0], [62.4, 709.0], [62.5, 709.0], [62.6, 709.0], [62.7, 709.0], [62.8, 709.0], [62.9, 709.0], [63.0, 709.0], [63.1, 709.0], [63.2, 709.0], [63.3, 709.0], [63.4, 709.0], [63.5, 709.0], [63.6, 709.0], [63.7, 709.0], [63.8, 709.0], [63.9, 709.0], [64.0, 710.0], [64.1, 710.0], [64.2, 710.0], [64.3, 710.0], [64.4, 710.0], [64.5, 710.0], [64.6, 710.0], [64.7, 710.0], [64.8, 710.0], [64.9, 710.0], [65.0, 710.0], [65.1, 710.0], [65.2, 710.0], [65.3, 710.0], [65.4, 710.0], [65.5, 710.0], [65.6, 710.0], [65.7, 711.0], [65.8, 711.0], [65.9, 711.0], [66.0, 711.0], [66.1, 711.0], [66.2, 711.0], [66.3, 711.0], [66.4, 711.0], [66.5, 711.0], [66.6, 711.0], [66.7, 711.0], [66.8, 711.0], [66.9, 711.0], [67.0, 711.0], [67.1, 712.0], [67.2, 712.0], [67.3, 712.0], [67.4, 712.0], [67.5, 712.0], [67.6, 712.0], [67.7, 712.0], [67.8, 712.0], [67.9, 712.0], [68.0, 712.0], [68.1, 712.0], [68.2, 713.0], [68.3, 713.0], [68.4, 713.0], [68.5, 713.0], [68.6, 713.0], [68.7, 713.0], [68.8, 713.0], [68.9, 713.0], [69.0, 714.0], [69.1, 714.0], [69.2, 714.0], [69.3, 714.0], [69.4, 714.0], [69.5, 714.0], [69.6, 714.0], [69.7, 714.0], [69.8, 715.0], [69.9, 715.0], [70.0, 715.0], [70.1, 715.0], [70.2, 715.0], [70.3, 715.0], [70.4, 715.0], [70.5, 716.0], [70.6, 716.0], [70.7, 716.0], [70.8, 716.0], [70.9, 716.0], [71.0, 717.0], [71.1, 717.0], [71.2, 717.0], [71.3, 717.0], [71.4, 718.0], [71.5, 718.0], [71.6, 718.0], [71.7, 718.0], [71.8, 719.0], [71.9, 719.0], [72.0, 719.0], [72.1, 720.0], [72.2, 720.0], [72.3, 720.0], [72.4, 721.0], [72.5, 721.0], [72.6, 722.0], [72.7, 723.0], [72.8, 723.0], [72.9, 724.0], [73.0, 724.0], [73.1, 725.0], [73.2, 726.0], [73.3, 727.0], [73.4, 728.0], [73.5, 729.0], [73.6, 730.0], [73.7, 731.0], [73.8, 731.0], [73.9, 732.0], [74.0, 733.0], [74.1, 735.0], [74.2, 736.0], [74.3, 737.0], [74.4, 738.0], [74.5, 739.0], [74.6, 740.0], [74.7, 740.0], [74.8, 742.0], [74.9, 743.0], [75.0, 744.0], [75.1, 745.0], [75.2, 747.0], [75.3, 748.0], [75.4, 749.0], [75.5, 750.0], [75.6, 752.0], [75.7, 753.0], [75.8, 754.0], [75.9, 755.0], [76.0, 756.0], [76.1, 757.0], [76.2, 758.0], [76.3, 759.0], [76.4, 760.0], [76.5, 762.0], [76.6, 763.0], [76.7, 765.0], [76.8, 766.0], [76.9, 768.0], [77.0, 770.0], [77.1, 772.0], [77.2, 773.0], [77.3, 775.0], [77.4, 777.0], [77.5, 779.0], [77.6, 781.0], [77.7, 782.0], [77.8, 784.0], [77.9, 786.0], [78.0, 789.0], [78.1, 791.0], [78.2, 793.0], [78.3, 795.0], [78.4, 796.0], [78.5, 798.0], [78.6, 799.0], [78.7, 801.0], [78.8, 802.0], [78.9, 804.0], [79.0, 805.0], [79.1, 806.0], [79.2, 808.0], [79.3, 810.0], [79.4, 812.0], [79.5, 814.0], [79.6, 816.0], [79.7, 819.0], [79.8, 821.0], [79.9, 823.0], [80.0, 826.0], [80.1, 828.0], [80.2, 830.0], [80.3, 832.0], [80.4, 835.0], [80.5, 837.0], [80.6, 841.0], [80.7, 843.0], [80.8, 845.0], [80.9, 848.0], [81.0, 850.0], [81.1, 853.0], [81.2, 856.0], [81.3, 858.0], [81.4, 861.0], [81.5, 865.0], [81.6, 868.0], [81.7, 872.0], [81.8, 877.0], [81.9, 882.0], [82.0, 886.0], [82.1, 889.0], [82.2, 894.0], [82.3, 899.0], [82.4, 904.0], [82.5, 908.0], [82.6, 911.0], [82.7, 915.0], [82.8, 918.0], [82.9, 921.0], [83.0, 923.0], [83.1, 926.0], [83.2, 929.0], [83.3, 931.0], [83.4, 933.0], [83.5, 934.0], [83.6, 936.0], [83.7, 937.0], [83.8, 939.0], [83.9, 940.0], [84.0, 942.0], [84.1, 945.0], [84.2, 948.0], [84.3, 952.0], [84.4, 955.0], [84.5, 960.0], [84.6, 965.0], [84.7, 968.0], [84.8, 974.0], [84.9, 979.0], [85.0, 984.0], [85.1, 988.0], [85.2, 993.0], [85.3, 998.0], [85.4, 1003.0], [85.5, 1014.0], [85.6, 1029.0], [85.7, 1036.0], [85.8, 1038.0], [85.9, 1042.0], [86.0, 1048.0], [86.1, 1057.0], [86.2, 1069.0], [86.3, 1086.0], [86.4, 1102.0], [86.5, 1115.0], [86.6, 1130.0], [86.7, 1137.0], [86.8, 1145.0], [86.9, 1158.0], [87.0, 1167.0], [87.1, 1183.0], [87.2, 1205.0], [87.3, 1221.0], [87.4, 1232.0], [87.5, 1237.0], [87.6, 1239.0], [87.7, 1242.0], [87.8, 1244.0], [87.9, 1246.0], [88.0, 1248.0], [88.1, 1250.0], [88.2, 1253.0], [88.3, 1255.0], [88.4, 1258.0], [88.5, 1261.0], [88.6, 1268.0], [88.7, 1279.0], [88.8, 1304.0], [88.9, 1328.0], [89.0, 1343.0], [89.1, 1355.0], [89.2, 1370.0], [89.3, 1390.0], [89.4, 1410.0], [89.5, 1428.0], [89.6, 1441.0], [89.7, 1455.0], [89.8, 1467.0], [89.9, 1476.0], [90.0, 1485.0], [90.1, 1498.0], [90.2, 1517.0], [90.3, 1530.0], [90.4, 1543.0], [90.5, 1552.0], [90.6, 1564.0], [90.7, 1579.0], [90.8, 1592.0], [90.9, 1612.0], [91.0, 1635.0], [91.1, 1661.0], [91.2, 1679.0], [91.3, 1695.0], [91.4, 1715.0], [91.5, 1734.0], [91.6, 1765.0], [91.7, 1777.0], [91.8, 1787.0], [91.9, 1801.0], [92.0, 1812.0], [92.1, 1828.0], [92.2, 1849.0], [92.3, 1870.0], [92.4, 1886.0], [92.5, 1900.0], [92.6, 1921.0], [92.7, 1951.0], [92.8, 1973.0], [92.9, 1985.0], [93.0, 1996.0], [93.1, 2006.0], [93.2, 2024.0], [93.3, 2045.0], [93.4, 2073.0], [93.5, 2080.0], [93.6, 2088.0], [93.7, 2099.0], [93.8, 2108.0], [93.9, 2119.0], [94.0, 2140.0], [94.1, 2165.0], [94.2, 2179.0], [94.3, 2194.0], [94.4, 2213.0], [94.5, 2236.0], [94.6, 2273.0], [94.7, 2282.0], [94.8, 2290.0], [94.9, 2305.0], [95.0, 2317.0], [95.1, 2329.0], [95.2, 2343.0], [95.3, 2360.0], [95.4, 2378.0], [95.5, 2386.0], [95.6, 2393.0], [95.7, 2403.0], [95.8, 2412.0], [95.9, 2424.0], [96.0, 2442.0], [96.1, 2456.0], [96.2, 2475.0], [96.3, 2482.0], [96.4, 2489.0], [96.5, 2497.0], [96.6, 2507.0], [96.7, 2519.0], [96.8, 2530.0], [96.9, 2548.0], [97.0, 2581.0], [97.1, 2594.0], [97.2, 2610.0], [97.3, 2627.0], [97.4, 2635.0], [97.5, 2646.0], [97.6, 2655.0], [97.7, 2668.0], [97.8, 2680.0], [97.9, 2690.0], [98.0, 2705.0], [98.1, 2720.0], [98.2, 2728.0], [98.3, 2736.0], [98.4, 2741.0], [98.5, 2745.0], [98.6, 2749.0], [98.7, 2753.0], [98.8, 2759.0], [98.9, 2768.0], [99.0, 2778.0], [99.1, 2788.0], [99.2, 2810.0], [99.3, 2866.0], [99.4, 2900.0], [99.5, 2932.0], [99.6, 2989.0], [99.7, 3058.0], [99.8, 3131.0], [99.9, 3248.0]], "isOverall": false, "label": "Create User", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 23.0, "minX": 300.0, "maxY": 19161.0, "series": [{"data": [[600.0, 9567.0], [700.0, 19161.0], [800.0, 1473.0], [900.0, 1199.0], [1000.0, 423.0], [1100.0, 312.0], [1200.0, 652.0], [1300.0, 227.0], [1400.0, 302.0], [1500.0, 293.0], [1600.0, 198.0], [1700.0, 218.0], [1800.0, 243.0], [1900.0, 220.0], [2000.0, 266.0], [2100.0, 250.0], [2300.0, 319.0], [2200.0, 213.0], [2400.0, 352.0], [2500.0, 242.0], [2600.0, 330.0], [2700.0, 480.0], [2800.0, 91.0], [2900.0, 90.0], [3000.0, 54.0], [3100.0, 51.0], [3300.0, 23.0], [3200.0, 23.0], [300.0, 646.0], [400.0, 1323.0], [500.0, 759.0]], "isOverall": false, "label": "Create User", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 3300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1983.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 34064.0, "series": [{"data": [[0.0, 1983.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 34064.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 3953.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.64139252E12, "maxY": 8.0, "series": [{"data": [[1.6413942E12, 8.0], [1.64139642E12, 8.0], [1.6413948E12, 8.0], [1.64139258E12, 8.0], [1.64139582E12, 8.0], [1.641396E12, 8.0], [1.64139318E12, 8.0], [1.64139378E12, 8.0], [1.6413954E12, 8.0], [1.64139276E12, 8.0], [1.64139498E12, 8.0], [1.64139438E12, 8.0], [1.64139336E12, 8.0], [1.6413966E12, 8.0], [1.64139396E12, 8.0], [1.64139618E12, 8.0], [1.64139456E12, 8.0], [1.64139558E12, 8.0], [1.64139324E12, 8.0], [1.64139546E12, 8.0], [1.64139384E12, 8.0], [1.64139486E12, 8.0], [1.64139444E12, 8.0], [1.64139666E12, 8.0], [1.64139504E12, 8.0], [1.64139606E12, 8.0], [1.64139282E12, 8.0], [1.64139624E12, 8.0], [1.64139342E12, 8.0], [1.64139402E12, 8.0], [1.64139564E12, 8.0], [1.641393E12, 8.0], [1.64139522E12, 8.0], [1.64139462E12, 8.0], [1.6413936E12, 8.0], [1.64139684E12, 8.0], [1.6413939E12, 8.0], [1.64139672E12, 8.0], [1.64139288E12, 8.0], [1.6413945E12, 8.0], [1.64139612E12, 8.0], [1.64139348E12, 8.0], [1.6413957E12, 8.0], [1.64139408E12, 8.0], [1.6413951E12, 8.0], [1.64139468E12, 8.0], [1.64139528E12, 8.0], [1.6413969E12, 7.404181184668989], [1.6413963E12, 8.0], [1.64139306E12, 8.0], [1.64139648E12, 8.0], [1.64139366E12, 8.0], [1.64139264E12, 8.0], [1.64139426E12, 8.0], [1.64139588E12, 8.0], [1.64139294E12, 8.0], [1.64139576E12, 8.0], [1.64139678E12, 8.0], [1.64139354E12, 8.0], [1.64139516E12, 8.0], [1.64139474E12, 8.0], [1.64139696E12, 1.0], [1.64139252E12, 8.0], [1.64139414E12, 8.0], [1.64139312E12, 8.0], [1.64139636E12, 8.0], [1.64139372E12, 8.0], [1.64139594E12, 8.0], [1.64139432E12, 8.0], [1.64139534E12, 8.0], [1.6413927E12, 8.0], [1.64139552E12, 8.0], [1.64139654E12, 8.0], [1.6413933E12, 8.0], [1.64139492E12, 8.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.64139696E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 701.4255319148936, "minX": 1.0, "maxY": 882.758518667102, "series": [{"data": [[8.0, 882.758518667102], [4.0, 705.0869565217392], [2.0, 703.25], [1.0, 704.2222222222222], [5.0, 701.5], [6.0, 701.4255319148936], [3.0, 703.5], [7.0, 702.0]], "isOverall": false, "label": "Create User", "isController": false}, {"data": [[7.990925000000004, 882.2318000000005]], "isOverall": false, "label": "Create User-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 8.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 67.8, "minX": 1.64139252E12, "maxY": 20410.783333333333, "series": [{"data": [[1.6413942E12, 11712.766666666666], [1.64139642E12, 15435.8], [1.6413948E12, 14422.85], [1.64139258E12, 1819.7166666666667], [1.64139582E12, 15342.75], [1.641396E12, 15321.916666666666], [1.64139318E12, 3015.266666666667], [1.64139378E12, 5067.083333333333], [1.6413954E12, 15251.466666666667], [1.64139276E12, 2068.266666666667], [1.64139498E12, 14812.35], [1.64139438E12, 12355.283333333333], [1.64139336E12, 3716.2166666666667], [1.6413966E12, 15481.0], [1.64139396E12, 6130.433333333333], [1.64139618E12, 15480.116666666667], [1.64139456E12, 13161.3], [1.64139558E12, 15251.466666666667], [1.64139324E12, 3160.133333333333], [1.64139546E12, 15161.066666666668], [1.64139384E12, 5718.916666666667], [1.64139486E12, 14401.133333333333], [1.64139444E12, 13570.75], [1.64139666E12, 15435.8], [1.64139504E12, 14836.716666666667], [1.64139606E12, 15321.916666666666], [1.64139282E12, 2142.6833333333334], [1.64139624E12, 15367.116666666667], [1.64139342E12, 3551.9333333333334], [1.64139402E12, 7132.583333333333], [1.64139564E12, 15159.3], [1.641393E12, 2420.95], [1.64139522E12, 14883.683333333332], [1.64139462E12, 13458.633333333333], [1.6413936E12, 4399.666666666667], [1.64139684E12, 15413.2], [1.6413939E12, 6114.4], [1.64139672E12, 15458.4], [1.64139288E12, 2208.866666666667], [1.6413945E12, 13274.3], [1.64139612E12, 15434.916666666666], [1.64139348E12, 3820.2], [1.6413957E12, 15366.233333333334], [1.64139408E12, 7524.983333333334], [1.6413951E12, 14952.366666666667], [1.64139468E12, 14005.45], [1.64139528E12, 14928.0], [1.6413969E12, 12972.4], [1.6413963E12, 15413.2], [1.64139306E12, 2742.15], [1.64139648E12, 15503.6], [1.64139366E12, 4525.566666666667], [1.64139264E12, 1879.8666666666666], [1.64139426E12, 12311.85], [1.64139588E12, 15228.866666666667], [1.64139294E12, 2393.883333333333], [1.64139576E12, 15343.633333333333], [1.64139678E12, 15481.0], [1.64139354E12, 3981.6833333333334], [1.64139516E12, 14952.366666666667], [1.64139474E12, 14006.333333333334], [1.64139696E12, 67.8], [1.64139252E12, 1240.8833333333334], [1.64139414E12, 9977.266666666666], [1.64139312E12, 2767.45], [1.64139636E12, 15502.716666666667], [1.64139372E12, 4970.016666666666], [1.64139594E12, 15389.716666666667], [1.64139432E12, 12605.65], [1.64139534E12, 15158.416666666666], [1.6413927E12, 2010.3166666666666], [1.64139552E12, 15135.816666666668], [1.64139654E12, 15435.8], [1.6413933E12, 3345.15], [1.64139492E12, 14607.183333333332]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6413942E12, 15169.783333333333], [1.64139642E12, 19886.683333333334], [1.6413948E12, 18605.55], [1.64139258E12, 5270.116666666667], [1.64139582E12, 19770.216666666667], [1.641396E12, 19741.1], [1.64139318E12, 8443.833333333334], [1.64139378E12, 13917.766666666666], [1.6413954E12, 19653.75], [1.64139276E12, 5939.8], [1.64139498E12, 19100.533333333333], [1.64139438E12, 15985.05], [1.64139336E12, 10307.3], [1.6413966E12, 19944.916666666668], [1.64139396E12, 16712.966666666667], [1.64139618E12, 19944.916666666668], [1.64139456E12, 17004.133333333335], [1.64139558E12, 19653.75], [1.64139324E12, 8851.466666666667], [1.64139546E12, 19537.283333333333], [1.64139384E12, 15635.65], [1.64139486E12, 18576.433333333334], [1.64139444E12, 17528.233333333334], [1.64139666E12, 19886.683333333334], [1.64139504E12, 19129.65], [1.64139606E12, 19741.1], [1.64139282E12, 6143.616666666667], [1.64139624E12, 19799.333333333332], [1.64139342E12, 9899.666666666666], [1.64139402E12, 19391.7], [1.64139564E12, 19537.283333333333], [1.641393E12, 6871.533333333334], [1.64139522E12, 19187.883333333335], [1.64139462E12, 17382.65], [1.6413936E12, 12141.65], [1.64139684E12, 19857.566666666666], [1.6413939E12, 16654.733333333334], [1.64139672E12, 19915.8], [1.64139288E12, 6318.316666666667], [1.6413945E12, 17149.716666666667], [1.64139612E12, 19886.683333333334], [1.64139348E12, 10598.466666666667], [1.6413957E12, 19799.333333333332], [1.64139408E12, 20410.783333333333], [1.6413951E12, 19275.233333333334], [1.64139468E12, 18081.45], [1.64139528E12, 19246.116666666665], [1.6413969E12, 16712.966666666667], [1.6413963E12, 19857.566666666666], [1.64139306E12, 7745.033333333334], [1.64139648E12, 19974.033333333333], [1.64139366E12, 12461.933333333332], [1.64139264E12, 5415.7], [1.64139426E12, 15926.816666666668], [1.64139588E12, 19624.633333333335], [1.64139294E12, 6813.3], [1.64139576E12, 19770.216666666667], [1.64139678E12, 19944.916666666668], [1.64139354E12, 11035.216666666667], [1.64139516E12, 19275.233333333334], [1.64139474E12, 18081.45], [1.64139696E12, 87.35], [1.64139252E12, 3610.4666666666667], [1.64139414E12, 16363.566666666668], [1.64139312E12, 7803.266666666666], [1.64139636E12, 19974.033333333333], [1.64139372E12, 13655.716666666667], [1.64139594E12, 19828.45], [1.64139432E12, 16305.333333333334], [1.64139534E12, 19537.283333333333], [1.6413927E12, 5794.216666666666], [1.64139552E12, 19508.166666666668], [1.64139654E12, 19886.683333333334], [1.6413933E12, 9346.45], [1.64139492E12, 18838.483333333334]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.64139696E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 685.3095577746078, "minX": 1.64139252E12, "maxY": 2659.9112903225796, "series": [{"data": [[1.6413942E12, 932.2015355086368], [1.64139642E12, 701.0746705710102], [1.6413948E12, 748.3787167449141], [1.64139258E12, 2641.9668508287295], [1.64139582E12, 707.8453608247427], [1.641396E12, 709.98377581121], [1.64139318E12, 1642.7793103448282], [1.64139378E12, 1010.2740585774064], [1.6413954E12, 712.2711111111107], [1.64139276E12, 2356.5245098039222], [1.64139498E12, 733.4969512195128], [1.64139438E12, 873.7577413479052], [1.64139336E12, 1340.5000000000002], [1.6413966E12, 701.9868613138676], [1.64139396E12, 822.2177700348428], [1.64139618E12, 702.2467153284666], [1.64139456E12, 818.9589041095894], [1.64139558E12, 709.2266666666661], [1.64139324E12, 1589.8124999999995], [1.64139546E12, 711.6140089418782], [1.64139384E12, 889.9441340782123], [1.64139486E12, 752.3479623824451], [1.64139444E12, 798.0232558139527], [1.64139666E12, 701.0219619326501], [1.64139504E12, 731.7442922374431], [1.64139606E12, 706.3421828908557], [1.64139282E12, 2262.298578199052], [1.64139624E12, 704.3308823529408], [1.64139342E12, 1419.0323529411764], [1.64139402E12, 734.0375375375379], [1.64139564E12, 716.5856929955283], [1.641393E12, 1978.5932203389837], [1.64139522E12, 725.9726858877087], [1.64139462E12, 800.413735343384], [1.6413936E12, 1163.330935251799], [1.64139684E12, 701.91495601173], [1.6413939E12, 842.5734265734262], [1.64139672E12, 701.7134502923972], [1.64139288E12, 2208.0092165898604], [1.6413945E12, 811.5246179966043], [1.64139612E12, 702.9458272327965], [1.64139348E12, 1311.9148351648348], [1.6413957E12, 706.2529411764706], [1.64139408E12, 685.3095577746078], [1.6413951E12, 724.2552870090636], [1.64139468E12, 779.8792270531397], [1.64139528E12, 726.3419062027232], [1.6413969E12, 701.7926829268298], [1.6413963E12, 701.1862170087983], [1.64139306E12, 1835.6541353383464], [1.64139648E12, 700.7157434402336], [1.64139366E12, 1113.2359813084129], [1.64139264E12, 2548.5591397849435], [1.64139426E12, 869.9579524680064], [1.64139588E12, 711.8338278931751], [1.64139294E12, 2072.4273504273497], [1.64139576E12, 705.6553755522827], [1.64139678E12, 701.4481751824819], [1.64139354E12, 1264.060686015832], [1.64139516E12, 725.0], [1.64139474E12, 774.0917874396131], [1.64139696E12, 700.3333333333334], [1.64139252E12, 2659.9112903225796], [1.64139414E12, 844.4928825622773], [1.64139312E12, 1792.1082089552226], [1.64139636E12, 702.7842565597667], [1.64139372E12, 1024.7420042643917], [1.64139594E12, 702.79295154185], [1.64139432E12, 862.1053571428566], [1.64139534E12, 716.4649776453052], [1.6413927E12, 2451.5025125628163], [1.64139552E12, 718.2611940298503], [1.64139654E12, 701.0541727672035], [1.6413933E12, 1513.436137071651], [1.64139492E12, 740.5625965996904]], "isOverall": false, "label": "Create User", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.64139696E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 685.3052781740371, "minX": 1.64139252E12, "maxY": 2659.83870967742, "series": [{"data": [[1.6413942E12, 932.2015355086368], [1.64139642E12, 701.067349926794], [1.6413948E12, 748.3724569640071], [1.64139258E12, 2641.878453038675], [1.64139582E12, 707.8409425625925], [1.641396E12, 709.9764011799421], [1.64139318E12, 1642.7655172413793], [1.64139378E12, 1010.2698744769885], [1.6413954E12, 712.2607407407412], [1.64139276E12, 2356.5196078431372], [1.64139498E12, 733.4908536585364], [1.64139438E12, 873.7540983606555], [1.64139336E12, 1340.4858757062157], [1.6413966E12, 701.9854014598544], [1.64139396E12, 822.2160278745644], [1.64139618E12, 702.2394160583947], [1.64139456E12, 818.9520547945212], [1.64139558E12, 709.2207407407409], [1.64139324E12, 1589.8026315789468], [1.64139546E12, 711.6125186289123], [1.64139384E12, 889.932960893855], [1.64139486E12, 752.341692789969], [1.64139444E12, 798.0199335548176], [1.64139666E12, 701.0146412884333], [1.64139504E12, 731.7321156773213], [1.64139606E12, 706.3333333333337], [1.64139282E12, 2262.2890995260664], [1.64139624E12, 704.3264705882345], [1.64139342E12, 1419.0205882352927], [1.64139402E12, 734.0330330330338], [1.64139564E12, 716.584202682563], [1.641393E12, 1978.572033898304], [1.64139522E12, 725.9635811836121], [1.64139462E12, 800.4087102177556], [1.6413936E12, 1163.316546762589], [1.64139684E12, 701.9105571847502], [1.6413939E12, 842.56993006993], [1.64139672E12, 701.7090643274852], [1.64139288E12, 2206.4423963133636], [1.6413945E12, 811.5161290322583], [1.64139612E12, 702.9399707174223], [1.64139348E12, 1311.909340659341], [1.6413957E12, 706.2514705882356], [1.64139408E12, 685.3052781740371], [1.6413951E12, 724.2552870090636], [1.64139468E12, 779.8711755233493], [1.64139528E12, 726.3373676248107], [1.6413969E12, 701.7857142857135], [1.6413963E12, 701.1788856304981], [1.64139306E12, 1835.6353383458645], [1.64139648E12, 700.7084548104949], [1.64139366E12, 1113.2266355140184], [1.64139264E12, 2548.553763440861], [1.64139426E12, 869.9542961608778], [1.64139588E12, 711.8323442136498], [1.64139294E12, 2072.4017094017104], [1.64139576E12, 705.6480117820333], [1.64139678E12, 701.440875912409], [1.64139354E12, 1264.0554089709763], [1.64139516E12, 724.9969788519637], [1.64139474E12, 774.0853462157804], [1.64139696E12, 700.3333333333334], [1.64139252E12, 2659.83870967742], [1.64139414E12, 844.4857651245551], [1.64139312E12, 1792.0895522388062], [1.64139636E12, 702.7769679300291], [1.64139372E12, 1024.7334754797425], [1.64139594E12, 702.7914831130693], [1.64139432E12, 862.1017857142863], [1.64139534E12, 716.4560357675117], [1.6413927E12, 2451.497487437186], [1.64139552E12, 718.2567164179106], [1.64139654E12, 701.0527086383601], [1.6413933E12, 1513.4299065420562], [1.64139492E12, 740.551777434312]], "isOverall": false, "label": "Create User", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.64139696E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 47.333333333333336, "minX": 1.64139252E12, "maxY": 53.64088397790052, "series": [{"data": [[1.6413942E12, 50.46641074856047], [1.64139642E12, 49.71742313323572], [1.6413948E12, 50.38184663536774], [1.64139258E12, 53.64088397790052], [1.64139582E12, 49.53755522827691], [1.641396E12, 52.30678466076695], [1.64139318E12, 51.072413793103465], [1.64139378E12, 51.59623430962343], [1.6413954E12, 49.76592592592589], [1.64139276E12, 52.65196078431371], [1.64139498E12, 50.17987804878052], [1.64139438E12, 51.44444444444445], [1.64139336E12, 51.466101694915224], [1.6413966E12, 49.655474452554785], [1.64139396E12, 51.729965156794464], [1.64139618E12, 49.33430656934307], [1.64139456E12, 50.45719178082195], [1.64139558E12, 50.32296296296297], [1.64139324E12, 51.10855263157893], [1.64139546E12, 50.00298062593141], [1.64139384E12, 52.22532588454379], [1.64139486E12, 50.304075235109686], [1.64139444E12, 50.52325581395351], [1.64139666E12, 49.32503660322105], [1.64139504E12, 50.47792998477934], [1.64139606E12, 49.834808259587], [1.64139282E12, 51.473933649289144], [1.64139624E12, 50.07794117647056], [1.64139342E12, 51.6176470588235], [1.64139402E12, 51.28678678678681], [1.64139564E12, 51.05514157973172], [1.641393E12, 51.1228813559322], [1.64139522E12, 49.699544764795164], [1.64139462E12, 50.807370184254616], [1.6413936E12, 51.812949640287734], [1.64139684E12, 49.882697947214005], [1.6413939E12, 50.856643356643374], [1.64139672E12, 50.095029239766056], [1.64139288E12, 51.96774193548388], [1.6413945E12, 50.11544991511037], [1.64139612E12, 49.43923865300148], [1.64139348E12, 51.07417582417583], [1.6413957E12, 50.660294117647055], [1.64139408E12, 51.253922967189744], [1.6413951E12, 50.59969788519636], [1.64139468E12, 50.77294685990339], [1.64139528E12, 49.603630862329794], [1.6413969E12, 49.64982578397212], [1.6413963E12, 49.838709677419374], [1.64139306E12, 51.90601503759397], [1.64139648E12, 49.52332361516035], [1.64139366E12, 51.434579439252346], [1.64139264E12, 53.4569892473118], [1.64139426E12, 50.21206581352833], [1.64139588E12, 50.053412462908014], [1.64139294E12, 51.371794871794876], [1.64139576E12, 50.08247422680408], [1.64139678E12, 49.98686131386865], [1.64139354E12, 51.25593667546177], [1.64139516E12, 49.41087613293049], [1.64139474E12, 50.44927536231886], [1.64139696E12, 47.333333333333336], [1.64139252E12, 51.99999999999998], [1.64139414E12, 50.4288256227758], [1.64139312E12, 51.24253731343281], [1.64139636E12, 49.57288629737608], [1.64139372E12, 51.678038379530925], [1.64139594E12, 49.88252569750367], [1.64139432E12, 50.653571428571425], [1.64139534E12, 49.22205663189271], [1.6413927E12, 53.623115577889415], [1.64139552E12, 50.54179104477612], [1.64139654E12, 49.648609077598834], [1.6413933E12, 50.89719626168227], [1.64139492E12, 50.242658423493054]], "isOverall": false, "label": "Create User", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.64139696E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 378.0, "minX": 1.64139252E12, "maxY": 3395.0, "series": [{"data": [[1.6413942E12, 2380.0], [1.64139642E12, 727.0], [1.6413948E12, 1587.0], [1.64139258E12, 3371.0], [1.64139582E12, 1263.0], [1.641396E12, 1236.0], [1.64139318E12, 3049.0], [1.64139378E12, 2742.0], [1.6413954E12, 1269.0], [1.64139276E12, 3302.0], [1.64139498E12, 1473.0], [1.64139438E12, 1868.0], [1.64139336E12, 2797.0], [1.6413966E12, 726.0], [1.64139396E12, 2713.0], [1.64139618E12, 1232.0], [1.64139456E12, 1877.0], [1.64139558E12, 1265.0], [1.64139324E12, 3045.0], [1.64139546E12, 1249.0], [1.64139384E12, 2856.0], [1.64139486E12, 1563.0], [1.64139444E12, 1591.0], [1.64139666E12, 733.0], [1.64139504E12, 1430.0], [1.64139606E12, 1256.0], [1.64139282E12, 3142.0], [1.64139624E12, 1251.0], [1.64139342E12, 2819.0], [1.64139402E12, 2422.0], [1.64139564E12, 1260.0], [1.641393E12, 3234.0], [1.64139522E12, 1467.0], [1.64139462E12, 1778.0], [1.6413936E12, 3006.0], [1.64139684E12, 725.0], [1.6413939E12, 2508.0], [1.64139672E12, 832.0], [1.64139288E12, 3275.0], [1.6413945E12, 1961.0], [1.64139612E12, 1248.0], [1.64139348E12, 3018.0], [1.6413957E12, 1242.0], [1.64139408E12, 2341.0], [1.6413951E12, 1390.0], [1.64139468E12, 1584.0], [1.64139528E12, 1472.0], [1.6413969E12, 725.0], [1.6413963E12, 721.0], [1.64139306E12, 3228.0], [1.64139648E12, 734.0], [1.64139366E12, 2618.0], [1.64139264E12, 3249.0], [1.64139426E12, 2102.0], [1.64139588E12, 1257.0], [1.64139294E12, 3373.0], [1.64139576E12, 1253.0], [1.64139678E12, 729.0], [1.64139354E12, 2841.0], [1.64139516E12, 1448.0], [1.64139474E12, 1667.0], [1.64139696E12, 704.0], [1.64139252E12, 3186.0], [1.64139414E12, 2297.0], [1.64139312E12, 3141.0], [1.64139636E12, 1246.0], [1.64139372E12, 2730.0], [1.64139594E12, 1260.0], [1.64139432E12, 2080.0], [1.64139534E12, 1340.0], [1.6413927E12, 3395.0], [1.64139552E12, 1270.0], [1.64139654E12, 732.0], [1.6413933E12, 3067.0], [1.64139492E12, 1493.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6413942E12, 1412.0000000000005], [1.64139642E12, 709.0], [1.6413948E12, 829.0], [1.64139258E12, 3289.8], [1.64139582E12, 711.0], [1.641396E12, 718.1], [1.64139318E12, 2593.5], [1.64139378E12, 1974.2], [1.6413954E12, 715.0], [1.64139276E12, 2981.0], [1.64139498E12, 798.0], [1.64139438E12, 1253.0], [1.64139336E12, 2412.5], [1.6413966E12, 710.0], [1.64139396E12, 1533.0], [1.64139618E12, 707.4], [1.64139456E12, 1083.0], [1.64139558E12, 713.0], [1.64139324E12, 2638.0], [1.64139546E12, 716.0], [1.64139384E12, 1887.0], [1.64139486E12, 874.0], [1.64139444E12, 987.8000000000002], [1.64139666E12, 709.0], [1.64139504E12, 792.0000000000002], [1.64139606E12, 710.0], [1.64139282E12, 2780.6], [1.64139624E12, 712.0], [1.64139342E12, 2380.0], [1.64139402E12, 1412.4000000000005], [1.64139564E12, 718.8000000000001], [1.641393E12, 2769.5], [1.64139522E12, 776.0], [1.64139462E12, 983.2], [1.6413936E12, 2216.4], [1.64139684E12, 710.0], [1.6413939E12, 1622.2000000000007], [1.64139672E12, 710.0], [1.64139288E12, 2850.2000000000007], [1.6413945E12, 1014.0], [1.64139612E12, 709.0], [1.64139348E12, 2278.0], [1.6413957E12, 712.0], [1.64139408E12, 1263.2000000000007], [1.6413951E12, 756.1000000000001], [1.64139468E12, 946.6000000000001], [1.64139528E12, 752.0], [1.6413969E12, 710.0], [1.6413963E12, 709.0], [1.64139306E12, 2730.6000000000004], [1.64139648E12, 708.0], [1.64139366E12, 2108.1], [1.64139264E12, 2923.0], [1.64139426E12, 1249.0], [1.64139588E12, 712.5], [1.64139294E12, 2899.0], [1.64139576E12, 710.0], [1.64139678E12, 710.0], [1.64139354E12, 2318.0], [1.64139516E12, 764.0], [1.64139474E12, 920.4000000000002], [1.64139696E12, 704.0], [1.64139252E12, 2884.0], [1.64139414E12, 1414.8999999999999], [1.64139312E12, 2717.1], [1.64139636E12, 709.0], [1.64139372E12, 2079.0], [1.64139594E12, 710.0], [1.64139432E12, 1241.8000000000002], [1.64139534E12, 718.0], [1.6413927E12, 2893.0], [1.64139552E12, 718.9], [1.64139654E12, 709.0], [1.6413933E12, 2520.4], [1.64139492E12, 806.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6413942E12, 2254.8999999999915], [1.64139642E12, 722.0], [1.6413948E12, 1260.2], [1.64139258E12, 3366.9], [1.64139582E12, 969.400000000001], [1.641396E12, 857.7300000000005], [1.64139318E12, 2983.389999999998], [1.64139378E12, 2634.3599999999997], [1.6413954E12, 968.44], [1.64139276E12, 3302.0], [1.64139498E12, 1255.86], [1.64139438E12, 1780.5], [1.64139336E12, 2772.25], [1.6413966E12, 718.0], [1.64139396E12, 2418.0], [1.64139618E12, 762.2999999999994], [1.64139456E12, 1591.7999999999975], [1.64139558E12, 934.48], [1.64139324E12, 3019.9], [1.64139546E12, 940.7999999999984], [1.64139384E12, 2477.86], [1.64139486E12, 1255.83], [1.64139444E12, 1463.97], [1.64139666E12, 718.16], [1.64139504E12, 1262.1], [1.64139606E12, 914.0800000000017], [1.64139282E12, 3116.0], [1.64139624E12, 728.3799999999999], [1.64139342E12, 2808.8999999999996], [1.64139402E12, 2277.66], [1.64139564E12, 1054.679999999993], [1.641393E12, 3118.63], [1.64139522E12, 1251.6], [1.64139462E12, 1549.2199999999998], [1.6413936E12, 2991.82], [1.64139684E12, 719.3399999999999], [1.6413939E12, 2404.54], [1.64139672E12, 726.15], [1.64139288E12, 3272.82], [1.6413945E12, 1771.0000000000018], [1.64139612E12, 829.0799999999996], [1.64139348E12, 2844.050000000006], [1.6413957E12, 840.7599999999998], [1.64139408E12, 1980.0], [1.6413951E12, 1244.1100000000001], [1.64139468E12, 1549.0199999999998], [1.64139528E12, 1255.9], [1.6413969E12, 719.25], [1.6413963E12, 718.0], [1.64139306E12, 3115.2999999999997], [1.64139648E12, 718.13], [1.64139366E12, 2499.2599999999998], [1.64139264E12, 3235.95], [1.64139426E12, 1900.1999999999985], [1.64139588E12, 982.25], [1.64139294E12, 3258.55], [1.64139576E12, 875.6000000000022], [1.64139678E12, 720.14], [1.64139354E12, 2764.7999999999997], [1.64139516E12, 1246.96], [1.64139474E12, 1467.4799999999996], [1.64139696E12, 704.0], [1.64139252E12, 3168.0], [1.64139414E12, 1906.22], [1.64139312E12, 3078.7400000000002], [1.64139636E12, 795.0599999999997], [1.64139372E12, 2696.5000000000005], [1.64139594E12, 795.6199999999995], [1.64139432E12, 1793.78], [1.64139534E12, 1240.12], [1.6413927E12, 3380.0], [1.64139552E12, 1235.87], [1.64139654E12, 718.4799999999999], [1.6413933E12, 3048.34], [1.64139492E12, 1265.7599999999998]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6413942E12, 1712.3999999999999], [1.64139642E12, 712.0], [1.6413948E12, 960.0], [1.64139258E12, 3319.8], [1.64139582E12, 718.0], [1.641396E12, 744.0], [1.64139318E12, 2706.5], [1.64139378E12, 2104.6499999999987], [1.6413954E12, 733.3999999999999], [1.64139276E12, 3124.75], [1.64139498E12, 887.4499999999999], [1.64139438E12, 1485.0], [1.64139336E12, 2592.75], [1.6413966E12, 713.0], [1.64139396E12, 1826.0], [1.64139618E12, 712.0], [1.64139456E12, 1284.25], [1.64139558E12, 723.0], [1.64139324E12, 2756.75], [1.64139546E12, 732.0], [1.64139384E12, 2275.1], [1.64139486E12, 972.0999999999999], [1.64139444E12, 1252.5500000000002], [1.64139666E12, 711.0], [1.64139504E12, 859.9000000000002], [1.64139606E12, 714.0], [1.64139282E12, 2872.4], [1.64139624E12, 716.0], [1.64139342E12, 2582.95], [1.64139402E12, 1700.65], [1.64139564E12, 799.1999999999999], [1.641393E12, 2866.0], [1.64139522E12, 850.0], [1.64139462E12, 1253.0], [1.6413936E12, 2630.1], [1.64139684E12, 713.0], [1.6413939E12, 1953.8000000000006], [1.64139672E12, 714.0], [1.64139288E12, 3064.4999999999995], [1.6413945E12, 1310.0], [1.64139612E12, 711.8], [1.64139348E12, 2420.5], [1.6413957E12, 716.0], [1.64139408E12, 1539.1999999999996], [1.6413951E12, 829.9500000000002], [1.64139468E12, 1237.0], [1.64139528E12, 852.8999999999997], [1.6413969E12, 713.0], [1.6413963E12, 713.0], [1.64139306E12, 2796.8999999999996], [1.64139648E12, 711.0], [1.64139366E12, 2311.1], [1.64139264E12, 3023.3], [1.64139426E12, 1533.6000000000004], [1.64139588E12, 723.25], [1.64139294E12, 3078.25], [1.64139576E12, 715.0], [1.64139678E12, 713.0], [1.64139354E12, 2553.0], [1.64139516E12, 867.4000000000001], [1.64139474E12, 1234.9999999999998], [1.64139696E12, 704.0], [1.64139252E12, 2992.5], [1.64139414E12, 1591.5500000000002], [1.64139312E12, 2811.1], [1.64139636E12, 712.0], [1.64139372E12, 2379.5], [1.64139594E12, 713.0], [1.64139432E12, 1492.5499999999993], [1.64139534E12, 787.8], [1.6413927E12, 3129.0], [1.64139552E12, 814.0], [1.64139654E12, 711.0], [1.6413933E12, 2729.8], [1.64139492E12, 943.6000000000003]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6413942E12, 691.0], [1.64139642E12, 686.0], [1.6413948E12, 691.0], [1.64139258E12, 399.0], [1.64139582E12, 686.0], [1.641396E12, 689.0], [1.64139318E12, 387.0], [1.64139378E12, 387.0], [1.6413954E12, 684.0], [1.64139276E12, 391.0], [1.64139498E12, 689.0], [1.64139438E12, 691.0], [1.64139336E12, 388.0], [1.6413966E12, 688.0], [1.64139396E12, 384.0], [1.64139618E12, 686.0], [1.64139456E12, 688.0], [1.64139558E12, 687.0], [1.64139324E12, 388.0], [1.64139546E12, 688.0], [1.64139384E12, 385.0], [1.64139486E12, 691.0], [1.64139444E12, 690.0], [1.64139666E12, 688.0], [1.64139504E12, 690.0], [1.64139606E12, 686.0], [1.64139282E12, 531.0], [1.64139624E12, 685.0], [1.64139342E12, 389.0], [1.64139402E12, 378.0], [1.64139564E12, 684.0], [1.641393E12, 394.0], [1.64139522E12, 688.0], [1.64139462E12, 690.0], [1.6413936E12, 384.0], [1.64139684E12, 689.0], [1.6413939E12, 381.0], [1.64139672E12, 685.0], [1.64139288E12, 436.0], [1.6413945E12, 688.0], [1.64139612E12, 686.0], [1.64139348E12, 384.0], [1.6413957E12, 689.0], [1.64139408E12, 382.0], [1.6413951E12, 690.0], [1.64139468E12, 686.0], [1.64139528E12, 687.0], [1.6413969E12, 688.0], [1.6413963E12, 687.0], [1.64139306E12, 388.0], [1.64139648E12, 687.0], [1.64139366E12, 384.0], [1.64139264E12, 542.0], [1.64139426E12, 690.0], [1.64139588E12, 685.0], [1.64139294E12, 404.0], [1.64139576E12, 688.0], [1.64139678E12, 686.0], [1.64139354E12, 388.0], [1.64139516E12, 687.0], [1.64139474E12, 686.0], [1.64139696E12, 698.0], [1.64139252E12, 926.0], [1.64139414E12, 384.0], [1.64139312E12, 389.0], [1.64139636E12, 685.0], [1.64139372E12, 381.0], [1.64139594E12, 689.0], [1.64139432E12, 691.0], [1.64139534E12, 690.0], [1.6413927E12, 492.0], [1.64139552E12, 687.0], [1.64139654E12, 684.0], [1.6413933E12, 391.0], [1.64139492E12, 690.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6413942E12, 781.0], [1.64139642E12, 701.0], [1.6413948E12, 706.0], [1.64139258E12, 2752.0], [1.64139582E12, 700.0], [1.641396E12, 704.0], [1.64139318E12, 1885.0], [1.64139378E12, 777.5], [1.6413954E12, 704.0], [1.64139276E12, 2664.0], [1.64139498E12, 704.0], [1.64139438E12, 773.0], [1.64139336E12, 1089.5], [1.6413966E12, 702.0], [1.64139396E12, 662.0], [1.64139618E12, 699.0], [1.64139456E12, 714.0], [1.64139558E12, 701.0], [1.64139324E12, 1683.0], [1.64139546E12, 704.0], [1.64139384E12, 623.0], [1.64139486E12, 707.0], [1.64139444E12, 711.0], [1.64139666E12, 700.0], [1.64139504E12, 705.0], [1.64139606E12, 702.0], [1.64139282E12, 2491.0], [1.64139624E12, 702.0], [1.64139342E12, 1239.5], [1.64139402E12, 538.0], [1.64139564E12, 704.0], [1.641393E12, 2328.0], [1.64139522E12, 704.0], [1.64139462E12, 713.0], [1.6413936E12, 849.0], [1.64139684E12, 701.0], [1.6413939E12, 660.5], [1.64139672E12, 701.0], [1.64139288E12, 2480.0], [1.6413945E12, 710.0], [1.64139612E12, 700.0], [1.64139348E12, 1121.0], [1.6413957E12, 702.0], [1.64139408E12, 515.0], [1.6413951E12, 705.0], [1.64139468E12, 709.0], [1.64139528E12, 703.0], [1.6413969E12, 701.0], [1.6413963E12, 701.0], [1.64139306E12, 2099.5], [1.64139648E12, 700.0], [1.64139366E12, 899.0], [1.64139264E12, 2723.0], [1.64139426E12, 759.0], [1.64139588E12, 702.0], [1.64139294E12, 2304.0], [1.64139576E12, 701.0], [1.64139678E12, 701.0], [1.64139354E12, 1017.0], [1.64139516E12, 703.0], [1.64139474E12, 707.0], [1.64139696E12, 699.0], [1.64139252E12, 2665.0], [1.64139414E12, 747.0], [1.64139312E12, 2023.5], [1.64139636E12, 700.0], [1.64139372E12, 741.0], [1.64139594E12, 700.0], [1.64139432E12, 741.5], [1.64139534E12, 703.0], [1.6413927E12, 2652.0], [1.64139552E12, 703.0], [1.64139654E12, 700.0], [1.6413933E12, 1521.0], [1.64139492E12, 705.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.64139696E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 399.5, "minX": 1.0, "maxY": 2324.5, "series": [{"data": [[2.0, 1883.0], [8.0, 760.5], [9.0, 705.0], [10.0, 703.0], [11.0, 702.0], [3.0, 2279.0], [12.0, 702.0], [13.0, 702.0], [14.0, 702.0], [15.0, 703.0], [4.0, 2324.5], [1.0, 1671.0], [16.0, 700.0], [17.0, 491.0], [18.0, 502.0], [19.0, 400.0], [5.0, 1802.0], [20.0, 413.0], [21.0, 445.5], [22.0, 399.5], [6.0, 1341.5], [7.0, 920.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 22.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 399.5, "minX": 1.0, "maxY": 2324.5, "series": [{"data": [[2.0, 1883.0], [8.0, 760.5], [9.0, 705.0], [10.0, 703.0], [11.0, 702.0], [3.0, 2279.0], [12.0, 702.0], [13.0, 702.0], [14.0, 702.0], [15.0, 703.0], [4.0, 2324.5], [1.0, 1671.0], [16.0, 700.0], [17.0, 491.0], [18.0, 502.0], [19.0, 400.0], [5.0, 1802.0], [20.0, 413.0], [21.0, 445.5], [22.0, 399.5], [6.0, 1341.5], [7.0, 920.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 22.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.64139252E12, "maxY": 11.683333333333334, "series": [{"data": [[1.6413942E12, 8.683333333333334], [1.64139642E12, 11.383333333333333], [1.6413948E12, 10.65], [1.64139258E12, 3.0166666666666666], [1.64139582E12, 11.316666666666666], [1.641396E12, 11.3], [1.64139318E12, 4.833333333333333], [1.64139378E12, 7.966666666666667], [1.6413954E12, 11.25], [1.64139276E12, 3.4], [1.64139498E12, 10.933333333333334], [1.64139438E12, 9.15], [1.64139336E12, 5.9], [1.6413966E12, 11.416666666666666], [1.64139396E12, 9.566666666666666], [1.64139618E12, 11.416666666666666], [1.64139456E12, 9.733333333333333], [1.64139558E12, 11.25], [1.64139324E12, 5.066666666666666], [1.64139546E12, 11.183333333333334], [1.64139384E12, 8.95], [1.64139486E12, 10.633333333333333], [1.64139444E12, 10.033333333333333], [1.64139666E12, 11.383333333333333], [1.64139504E12, 10.95], [1.64139606E12, 11.3], [1.64139282E12, 3.5166666666666666], [1.64139624E12, 11.333333333333334], [1.64139342E12, 5.666666666666667], [1.64139402E12, 11.1], [1.64139564E12, 11.183333333333334], [1.641393E12, 3.933333333333333], [1.64139522E12, 10.983333333333333], [1.64139462E12, 9.95], [1.6413936E12, 6.95], [1.64139684E12, 11.366666666666667], [1.6413939E12, 9.533333333333333], [1.64139672E12, 11.4], [1.64139288E12, 3.6166666666666667], [1.6413945E12, 9.816666666666666], [1.64139612E12, 11.383333333333333], [1.64139348E12, 6.066666666666666], [1.6413957E12, 11.333333333333334], [1.64139408E12, 11.683333333333334], [1.6413951E12, 11.033333333333333], [1.64139468E12, 10.35], [1.64139528E12, 11.016666666666667], [1.6413969E12, 9.45], [1.6413963E12, 11.366666666666667], [1.64139306E12, 4.433333333333334], [1.64139648E12, 11.433333333333334], [1.64139366E12, 7.133333333333334], [1.64139264E12, 3.1], [1.64139426E12, 9.116666666666667], [1.64139588E12, 11.233333333333333], [1.64139294E12, 3.9], [1.64139576E12, 11.316666666666666], [1.64139678E12, 11.416666666666666], [1.64139354E12, 6.316666666666666], [1.64139516E12, 11.033333333333333], [1.64139474E12, 10.35], [1.64139696E12, 0.03333333333333333], [1.64139252E12, 2.2], [1.64139414E12, 9.366666666666667], [1.64139312E12, 4.466666666666667], [1.64139636E12, 11.433333333333334], [1.64139372E12, 7.816666666666666], [1.64139594E12, 11.35], [1.64139432E12, 9.333333333333334], [1.64139534E12, 11.183333333333334], [1.6413927E12, 3.316666666666667], [1.64139552E12, 11.166666666666666], [1.64139654E12, 11.383333333333333], [1.6413933E12, 5.35], [1.64139492E12, 10.783333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.64139696E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.64139252E12, "maxY": 11.683333333333334, "series": [{"data": [[1.6413942E12, 8.683333333333334], [1.64139642E12, 11.383333333333333], [1.6413948E12, 10.65], [1.64139258E12, 3.0166666666666666], [1.64139582E12, 11.316666666666666], [1.641396E12, 11.3], [1.64139318E12, 4.833333333333333], [1.64139378E12, 7.966666666666667], [1.6413954E12, 11.25], [1.64139276E12, 3.4], [1.64139498E12, 10.933333333333334], [1.64139438E12, 9.15], [1.64139336E12, 5.9], [1.6413966E12, 11.416666666666666], [1.64139396E12, 9.566666666666666], [1.64139618E12, 11.416666666666666], [1.64139456E12, 9.733333333333333], [1.64139558E12, 11.25], [1.64139324E12, 5.066666666666666], [1.64139546E12, 11.183333333333334], [1.64139384E12, 8.95], [1.64139486E12, 10.633333333333333], [1.64139444E12, 10.033333333333333], [1.64139666E12, 11.383333333333333], [1.64139504E12, 10.95], [1.64139606E12, 11.3], [1.64139282E12, 3.5166666666666666], [1.64139624E12, 11.333333333333334], [1.64139342E12, 5.666666666666667], [1.64139402E12, 11.1], [1.64139564E12, 11.183333333333334], [1.641393E12, 3.933333333333333], [1.64139522E12, 10.983333333333333], [1.64139462E12, 9.95], [1.6413936E12, 6.95], [1.64139684E12, 11.366666666666667], [1.6413939E12, 9.533333333333333], [1.64139672E12, 11.4], [1.64139288E12, 3.6166666666666667], [1.6413945E12, 9.816666666666666], [1.64139612E12, 11.383333333333333], [1.64139348E12, 6.066666666666666], [1.6413957E12, 11.333333333333334], [1.64139408E12, 11.683333333333334], [1.6413951E12, 11.033333333333333], [1.64139468E12, 10.35], [1.64139528E12, 11.016666666666667], [1.6413969E12, 9.566666666666666], [1.6413963E12, 11.366666666666667], [1.64139306E12, 4.433333333333334], [1.64139648E12, 11.433333333333334], [1.64139366E12, 7.133333333333334], [1.64139264E12, 3.1], [1.64139426E12, 9.116666666666667], [1.64139588E12, 11.233333333333333], [1.64139294E12, 3.9], [1.64139576E12, 11.316666666666666], [1.64139678E12, 11.416666666666666], [1.64139354E12, 6.316666666666666], [1.64139516E12, 11.033333333333333], [1.64139474E12, 10.35], [1.64139696E12, 0.05], [1.64139252E12, 2.066666666666667], [1.64139414E12, 9.366666666666667], [1.64139312E12, 4.466666666666667], [1.64139636E12, 11.433333333333334], [1.64139372E12, 7.816666666666666], [1.64139594E12, 11.35], [1.64139432E12, 9.333333333333334], [1.64139534E12, 11.183333333333334], [1.6413927E12, 3.316666666666667], [1.64139552E12, 11.166666666666666], [1.64139654E12, 11.383333333333333], [1.6413933E12, 5.35], [1.64139492E12, 10.783333333333333]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.64139696E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.64139252E12, "maxY": 11.683333333333334, "series": [{"data": [[1.6413942E12, 8.683333333333334], [1.64139642E12, 11.383333333333333], [1.6413948E12, 10.65], [1.64139258E12, 3.0166666666666666], [1.64139582E12, 11.316666666666666], [1.641396E12, 11.3], [1.64139318E12, 4.833333333333333], [1.64139378E12, 7.966666666666667], [1.6413954E12, 11.25], [1.64139276E12, 3.4], [1.64139498E12, 10.933333333333334], [1.64139438E12, 9.15], [1.64139336E12, 5.9], [1.6413966E12, 11.416666666666666], [1.64139396E12, 9.566666666666666], [1.64139618E12, 11.416666666666666], [1.64139456E12, 9.733333333333333], [1.64139558E12, 11.25], [1.64139324E12, 5.066666666666666], [1.64139546E12, 11.183333333333334], [1.64139384E12, 8.95], [1.64139486E12, 10.633333333333333], [1.64139444E12, 10.033333333333333], [1.64139666E12, 11.383333333333333], [1.64139504E12, 10.95], [1.64139606E12, 11.3], [1.64139282E12, 3.5166666666666666], [1.64139624E12, 11.333333333333334], [1.64139342E12, 5.666666666666667], [1.64139402E12, 11.1], [1.64139564E12, 11.183333333333334], [1.641393E12, 3.933333333333333], [1.64139522E12, 10.983333333333333], [1.64139462E12, 9.95], [1.6413936E12, 6.95], [1.64139684E12, 11.366666666666667], [1.6413939E12, 9.533333333333333], [1.64139672E12, 11.4], [1.64139288E12, 3.6166666666666667], [1.6413945E12, 9.816666666666666], [1.64139612E12, 11.383333333333333], [1.64139348E12, 6.066666666666666], [1.6413957E12, 11.333333333333334], [1.64139408E12, 11.683333333333334], [1.6413951E12, 11.033333333333333], [1.64139468E12, 10.35], [1.64139528E12, 11.016666666666667], [1.6413969E12, 9.566666666666666], [1.6413963E12, 11.366666666666667], [1.64139306E12, 4.433333333333334], [1.64139648E12, 11.433333333333334], [1.64139366E12, 7.133333333333334], [1.64139264E12, 3.1], [1.64139426E12, 9.116666666666667], [1.64139588E12, 11.233333333333333], [1.64139294E12, 3.9], [1.64139576E12, 11.316666666666666], [1.64139678E12, 11.416666666666666], [1.64139354E12, 6.316666666666666], [1.64139516E12, 11.033333333333333], [1.64139474E12, 10.35], [1.64139696E12, 0.05], [1.64139252E12, 2.066666666666667], [1.64139414E12, 9.366666666666667], [1.64139312E12, 4.466666666666667], [1.64139636E12, 11.433333333333334], [1.64139372E12, 7.816666666666666], [1.64139594E12, 11.35], [1.64139432E12, 9.333333333333334], [1.64139534E12, 11.183333333333334], [1.6413927E12, 3.316666666666667], [1.64139552E12, 11.166666666666666], [1.64139654E12, 11.383333333333333], [1.6413933E12, 5.35], [1.64139492E12, 10.783333333333333]], "isOverall": false, "label": "Create User-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.64139696E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.64139252E12, "maxY": 11.683333333333334, "series": [{"data": [[1.6413942E12, 8.683333333333334], [1.64139642E12, 11.383333333333333], [1.6413948E12, 10.65], [1.64139258E12, 3.0166666666666666], [1.64139582E12, 11.316666666666666], [1.641396E12, 11.3], [1.64139318E12, 4.833333333333333], [1.64139378E12, 7.966666666666667], [1.6413954E12, 11.25], [1.64139276E12, 3.4], [1.64139498E12, 10.933333333333334], [1.64139438E12, 9.15], [1.64139336E12, 5.9], [1.6413966E12, 11.416666666666666], [1.64139396E12, 9.566666666666666], [1.64139618E12, 11.416666666666666], [1.64139456E12, 9.733333333333333], [1.64139558E12, 11.25], [1.64139324E12, 5.066666666666666], [1.64139546E12, 11.183333333333334], [1.64139384E12, 8.95], [1.64139486E12, 10.633333333333333], [1.64139444E12, 10.033333333333333], [1.64139666E12, 11.383333333333333], [1.64139504E12, 10.95], [1.64139606E12, 11.3], [1.64139282E12, 3.5166666666666666], [1.64139624E12, 11.333333333333334], [1.64139342E12, 5.666666666666667], [1.64139402E12, 11.1], [1.64139564E12, 11.183333333333334], [1.641393E12, 3.933333333333333], [1.64139522E12, 10.983333333333333], [1.64139462E12, 9.95], [1.6413936E12, 6.95], [1.64139684E12, 11.366666666666667], [1.6413939E12, 9.533333333333333], [1.64139672E12, 11.4], [1.64139288E12, 3.6166666666666667], [1.6413945E12, 9.816666666666666], [1.64139612E12, 11.383333333333333], [1.64139348E12, 6.066666666666666], [1.6413957E12, 11.333333333333334], [1.64139408E12, 11.683333333333334], [1.6413951E12, 11.033333333333333], [1.64139468E12, 10.35], [1.64139528E12, 11.016666666666667], [1.6413969E12, 9.566666666666666], [1.6413963E12, 11.366666666666667], [1.64139306E12, 4.433333333333334], [1.64139648E12, 11.433333333333334], [1.64139366E12, 7.133333333333334], [1.64139264E12, 3.1], [1.64139426E12, 9.116666666666667], [1.64139588E12, 11.233333333333333], [1.64139294E12, 3.9], [1.64139576E12, 11.316666666666666], [1.64139678E12, 11.416666666666666], [1.64139354E12, 6.316666666666666], [1.64139516E12, 11.033333333333333], [1.64139474E12, 10.35], [1.64139696E12, 0.05], [1.64139252E12, 2.066666666666667], [1.64139414E12, 9.366666666666667], [1.64139312E12, 4.466666666666667], [1.64139636E12, 11.433333333333334], [1.64139372E12, 7.816666666666666], [1.64139594E12, 11.35], [1.64139432E12, 9.333333333333334], [1.64139534E12, 11.183333333333334], [1.6413927E12, 3.316666666666667], [1.64139552E12, 11.166666666666666], [1.64139654E12, 11.383333333333333], [1.6413933E12, 5.35], [1.64139492E12, 10.783333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.64139696E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

