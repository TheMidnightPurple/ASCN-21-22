/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 374.0, "minX": 0.0, "maxY": 3483.0, "series": [{"data": [[0.0, 374.0], [0.1, 522.0], [0.2, 559.0], [0.3, 666.0], [0.4, 668.0], [0.5, 668.0], [0.6, 669.0], [0.7, 669.0], [0.8, 669.0], [0.9, 670.0], [1.0, 670.0], [1.1, 670.0], [1.2, 671.0], [1.3, 671.0], [1.4, 671.0], [1.5, 671.0], [1.6, 671.0], [1.7, 671.0], [1.8, 672.0], [1.9, 672.0], [2.0, 672.0], [2.1, 672.0], [2.2, 672.0], [2.3, 672.0], [2.4, 672.0], [2.5, 672.0], [2.6, 672.0], [2.7, 673.0], [2.8, 673.0], [2.9, 673.0], [3.0, 673.0], [3.1, 673.0], [3.2, 673.0], [3.3, 673.0], [3.4, 673.0], [3.5, 673.0], [3.6, 673.0], [3.7, 674.0], [3.8, 674.0], [3.9, 674.0], [4.0, 674.0], [4.1, 674.0], [4.2, 674.0], [4.3, 674.0], [4.4, 674.0], [4.5, 674.0], [4.6, 674.0], [4.7, 674.0], [4.8, 674.0], [4.9, 675.0], [5.0, 675.0], [5.1, 675.0], [5.2, 675.0], [5.3, 675.0], [5.4, 675.0], [5.5, 675.0], [5.6, 675.0], [5.7, 675.0], [5.8, 675.0], [5.9, 675.0], [6.0, 675.0], [6.1, 675.0], [6.2, 675.0], [6.3, 675.0], [6.4, 675.0], [6.5, 676.0], [6.6, 676.0], [6.7, 676.0], [6.8, 676.0], [6.9, 676.0], [7.0, 676.0], [7.1, 676.0], [7.2, 676.0], [7.3, 676.0], [7.4, 676.0], [7.5, 676.0], [7.6, 676.0], [7.7, 676.0], [7.8, 676.0], [7.9, 676.0], [8.0, 676.0], [8.1, 676.0], [8.2, 677.0], [8.3, 677.0], [8.4, 677.0], [8.5, 677.0], [8.6, 677.0], [8.7, 677.0], [8.8, 677.0], [8.9, 677.0], [9.0, 677.0], [9.1, 677.0], [9.2, 677.0], [9.3, 677.0], [9.4, 677.0], [9.5, 677.0], [9.6, 677.0], [9.7, 677.0], [9.8, 677.0], [9.9, 677.0], [10.0, 677.0], [10.1, 677.0], [10.2, 678.0], [10.3, 678.0], [10.4, 678.0], [10.5, 678.0], [10.6, 678.0], [10.7, 678.0], [10.8, 678.0], [10.9, 678.0], [11.0, 678.0], [11.1, 678.0], [11.2, 678.0], [11.3, 678.0], [11.4, 678.0], [11.5, 678.0], [11.6, 678.0], [11.7, 678.0], [11.8, 678.0], [11.9, 678.0], [12.0, 678.0], [12.1, 678.0], [12.2, 679.0], [12.3, 679.0], [12.4, 679.0], [12.5, 679.0], [12.6, 679.0], [12.7, 679.0], [12.8, 679.0], [12.9, 679.0], [13.0, 679.0], [13.1, 679.0], [13.2, 679.0], [13.3, 679.0], [13.4, 679.0], [13.5, 679.0], [13.6, 679.0], [13.7, 679.0], [13.8, 679.0], [13.9, 679.0], [14.0, 679.0], [14.1, 679.0], [14.2, 679.0], [14.3, 679.0], [14.4, 679.0], [14.5, 679.0], [14.6, 680.0], [14.7, 680.0], [14.8, 680.0], [14.9, 680.0], [15.0, 680.0], [15.1, 680.0], [15.2, 680.0], [15.3, 680.0], [15.4, 680.0], [15.5, 680.0], [15.6, 680.0], [15.7, 680.0], [15.8, 680.0], [15.9, 680.0], [16.0, 680.0], [16.1, 680.0], [16.2, 680.0], [16.3, 680.0], [16.4, 680.0], [16.5, 680.0], [16.6, 680.0], [16.7, 680.0], [16.8, 680.0], [16.9, 680.0], [17.0, 680.0], [17.1, 681.0], [17.2, 681.0], [17.3, 681.0], [17.4, 681.0], [17.5, 681.0], [17.6, 681.0], [17.7, 681.0], [17.8, 681.0], [17.9, 681.0], [18.0, 681.0], [18.1, 681.0], [18.2, 681.0], [18.3, 681.0], [18.4, 681.0], [18.5, 681.0], [18.6, 681.0], [18.7, 681.0], [18.8, 681.0], [18.9, 681.0], [19.0, 681.0], [19.1, 681.0], [19.2, 681.0], [19.3, 681.0], [19.4, 681.0], [19.5, 681.0], [19.6, 681.0], [19.7, 682.0], [19.8, 682.0], [19.9, 682.0], [20.0, 682.0], [20.1, 682.0], [20.2, 682.0], [20.3, 682.0], [20.4, 682.0], [20.5, 682.0], [20.6, 682.0], [20.7, 682.0], [20.8, 682.0], [20.9, 682.0], [21.0, 682.0], [21.1, 682.0], [21.2, 682.0], [21.3, 682.0], [21.4, 682.0], [21.5, 682.0], [21.6, 682.0], [21.7, 682.0], [21.8, 682.0], [21.9, 682.0], [22.0, 682.0], [22.1, 682.0], [22.2, 682.0], [22.3, 682.0], [22.4, 683.0], [22.5, 683.0], [22.6, 683.0], [22.7, 683.0], [22.8, 683.0], [22.9, 683.0], [23.0, 683.0], [23.1, 683.0], [23.2, 683.0], [23.3, 683.0], [23.4, 683.0], [23.5, 683.0], [23.6, 683.0], [23.7, 683.0], [23.8, 683.0], [23.9, 683.0], [24.0, 683.0], [24.1, 683.0], [24.2, 683.0], [24.3, 683.0], [24.4, 683.0], [24.5, 683.0], [24.6, 683.0], [24.7, 683.0], [24.8, 683.0], [24.9, 683.0], [25.0, 683.0], [25.1, 683.0], [25.2, 683.0], [25.3, 684.0], [25.4, 684.0], [25.5, 684.0], [25.6, 684.0], [25.7, 684.0], [25.8, 684.0], [25.9, 684.0], [26.0, 684.0], [26.1, 684.0], [26.2, 684.0], [26.3, 684.0], [26.4, 684.0], [26.5, 684.0], [26.6, 684.0], [26.7, 684.0], [26.8, 684.0], [26.9, 684.0], [27.0, 684.0], [27.1, 684.0], [27.2, 684.0], [27.3, 684.0], [27.4, 684.0], [27.5, 684.0], [27.6, 684.0], [27.7, 684.0], [27.8, 684.0], [27.9, 684.0], [28.0, 684.0], [28.1, 684.0], [28.2, 684.0], [28.3, 685.0], [28.4, 685.0], [28.5, 685.0], [28.6, 685.0], [28.7, 685.0], [28.8, 685.0], [28.9, 685.0], [29.0, 685.0], [29.1, 685.0], [29.2, 685.0], [29.3, 685.0], [29.4, 685.0], [29.5, 685.0], [29.6, 685.0], [29.7, 685.0], [29.8, 685.0], [29.9, 685.0], [30.0, 685.0], [30.1, 685.0], [30.2, 685.0], [30.3, 685.0], [30.4, 685.0], [30.5, 685.0], [30.6, 685.0], [30.7, 685.0], [30.8, 685.0], [30.9, 685.0], [31.0, 685.0], [31.1, 685.0], [31.2, 686.0], [31.3, 686.0], [31.4, 686.0], [31.5, 686.0], [31.6, 686.0], [31.7, 686.0], [31.8, 686.0], [31.9, 686.0], [32.0, 686.0], [32.1, 686.0], [32.2, 686.0], [32.3, 686.0], [32.4, 686.0], [32.5, 686.0], [32.6, 686.0], [32.7, 686.0], [32.8, 686.0], [32.9, 686.0], [33.0, 686.0], [33.1, 686.0], [33.2, 686.0], [33.3, 686.0], [33.4, 686.0], [33.5, 686.0], [33.6, 686.0], [33.7, 686.0], [33.8, 686.0], [33.9, 686.0], [34.0, 686.0], [34.1, 686.0], [34.2, 687.0], [34.3, 687.0], [34.4, 687.0], [34.5, 687.0], [34.6, 687.0], [34.7, 687.0], [34.8, 687.0], [34.9, 687.0], [35.0, 687.0], [35.1, 687.0], [35.2, 687.0], [35.3, 687.0], [35.4, 687.0], [35.5, 687.0], [35.6, 687.0], [35.7, 687.0], [35.8, 687.0], [35.9, 687.0], [36.0, 687.0], [36.1, 687.0], [36.2, 687.0], [36.3, 687.0], [36.4, 687.0], [36.5, 687.0], [36.6, 687.0], [36.7, 687.0], [36.8, 687.0], [36.9, 687.0], [37.0, 687.0], [37.1, 688.0], [37.2, 688.0], [37.3, 688.0], [37.4, 688.0], [37.5, 688.0], [37.6, 688.0], [37.7, 688.0], [37.8, 688.0], [37.9, 688.0], [38.0, 688.0], [38.1, 688.0], [38.2, 688.0], [38.3, 688.0], [38.4, 688.0], [38.5, 688.0], [38.6, 688.0], [38.7, 688.0], [38.8, 688.0], [38.9, 688.0], [39.0, 688.0], [39.1, 688.0], [39.2, 688.0], [39.3, 688.0], [39.4, 688.0], [39.5, 688.0], [39.6, 688.0], [39.7, 688.0], [39.8, 688.0], [39.9, 689.0], [40.0, 689.0], [40.1, 689.0], [40.2, 689.0], [40.3, 689.0], [40.4, 689.0], [40.5, 689.0], [40.6, 689.0], [40.7, 689.0], [40.8, 689.0], [40.9, 689.0], [41.0, 689.0], [41.1, 689.0], [41.2, 689.0], [41.3, 689.0], [41.4, 689.0], [41.5, 689.0], [41.6, 689.0], [41.7, 689.0], [41.8, 689.0], [41.9, 689.0], [42.0, 689.0], [42.1, 689.0], [42.2, 689.0], [42.3, 689.0], [42.4, 689.0], [42.5, 689.0], [42.6, 690.0], [42.7, 690.0], [42.8, 690.0], [42.9, 690.0], [43.0, 690.0], [43.1, 690.0], [43.2, 690.0], [43.3, 690.0], [43.4, 690.0], [43.5, 690.0], [43.6, 690.0], [43.7, 690.0], [43.8, 690.0], [43.9, 690.0], [44.0, 690.0], [44.1, 690.0], [44.2, 690.0], [44.3, 690.0], [44.4, 690.0], [44.5, 690.0], [44.6, 690.0], [44.7, 690.0], [44.8, 690.0], [44.9, 690.0], [45.0, 690.0], [45.1, 690.0], [45.2, 690.0], [45.3, 691.0], [45.4, 691.0], [45.5, 691.0], [45.6, 691.0], [45.7, 691.0], [45.8, 691.0], [45.9, 691.0], [46.0, 691.0], [46.1, 691.0], [46.2, 691.0], [46.3, 691.0], [46.4, 691.0], [46.5, 691.0], [46.6, 691.0], [46.7, 691.0], [46.8, 691.0], [46.9, 691.0], [47.0, 691.0], [47.1, 691.0], [47.2, 691.0], [47.3, 691.0], [47.4, 691.0], [47.5, 691.0], [47.6, 691.0], [47.7, 692.0], [47.8, 692.0], [47.9, 692.0], [48.0, 692.0], [48.1, 692.0], [48.2, 692.0], [48.3, 692.0], [48.4, 692.0], [48.5, 692.0], [48.6, 692.0], [48.7, 692.0], [48.8, 692.0], [48.9, 692.0], [49.0, 692.0], [49.1, 692.0], [49.2, 692.0], [49.3, 692.0], [49.4, 692.0], [49.5, 692.0], [49.6, 692.0], [49.7, 692.0], [49.8, 692.0], [49.9, 692.0], [50.0, 692.0], [50.1, 693.0], [50.2, 693.0], [50.3, 693.0], [50.4, 693.0], [50.5, 693.0], [50.6, 693.0], [50.7, 693.0], [50.8, 693.0], [50.9, 693.0], [51.0, 693.0], [51.1, 693.0], [51.2, 693.0], [51.3, 693.0], [51.4, 693.0], [51.5, 693.0], [51.6, 693.0], [51.7, 693.0], [51.8, 693.0], [51.9, 693.0], [52.0, 693.0], [52.1, 693.0], [52.2, 694.0], [52.3, 694.0], [52.4, 694.0], [52.5, 694.0], [52.6, 694.0], [52.7, 694.0], [52.8, 694.0], [52.9, 694.0], [53.0, 694.0], [53.1, 694.0], [53.2, 694.0], [53.3, 694.0], [53.4, 694.0], [53.5, 694.0], [53.6, 694.0], [53.7, 694.0], [53.8, 694.0], [53.9, 694.0], [54.0, 694.0], [54.1, 694.0], [54.2, 695.0], [54.3, 695.0], [54.4, 695.0], [54.5, 695.0], [54.6, 695.0], [54.7, 695.0], [54.8, 695.0], [54.9, 695.0], [55.0, 695.0], [55.1, 695.0], [55.2, 695.0], [55.3, 695.0], [55.4, 695.0], [55.5, 695.0], [55.6, 695.0], [55.7, 695.0], [55.8, 695.0], [55.9, 695.0], [56.0, 696.0], [56.1, 696.0], [56.2, 696.0], [56.3, 696.0], [56.4, 696.0], [56.5, 696.0], [56.6, 696.0], [56.7, 696.0], [56.8, 696.0], [56.9, 696.0], [57.0, 696.0], [57.1, 696.0], [57.2, 696.0], [57.3, 696.0], [57.4, 696.0], [57.5, 696.0], [57.6, 697.0], [57.7, 697.0], [57.8, 697.0], [57.9, 697.0], [58.0, 697.0], [58.1, 697.0], [58.2, 697.0], [58.3, 697.0], [58.4, 697.0], [58.5, 697.0], [58.6, 697.0], [58.7, 697.0], [58.8, 697.0], [58.9, 697.0], [59.0, 698.0], [59.1, 698.0], [59.2, 698.0], [59.3, 698.0], [59.4, 698.0], [59.5, 698.0], [59.6, 698.0], [59.7, 698.0], [59.8, 698.0], [59.9, 698.0], [60.0, 698.0], [60.1, 698.0], [60.2, 698.0], [60.3, 699.0], [60.4, 699.0], [60.5, 699.0], [60.6, 699.0], [60.7, 699.0], [60.8, 699.0], [60.9, 699.0], [61.0, 699.0], [61.1, 699.0], [61.2, 699.0], [61.3, 700.0], [61.4, 700.0], [61.5, 700.0], [61.6, 700.0], [61.7, 700.0], [61.8, 700.0], [61.9, 700.0], [62.0, 700.0], [62.1, 700.0], [62.2, 700.0], [62.3, 700.0], [62.4, 701.0], [62.5, 701.0], [62.6, 701.0], [62.7, 701.0], [62.8, 701.0], [62.9, 701.0], [63.0, 701.0], [63.1, 701.0], [63.2, 702.0], [63.3, 702.0], [63.4, 702.0], [63.5, 702.0], [63.6, 702.0], [63.7, 702.0], [63.8, 702.0], [63.9, 703.0], [64.0, 703.0], [64.1, 703.0], [64.2, 703.0], [64.3, 703.0], [64.4, 704.0], [64.5, 704.0], [64.6, 704.0], [64.7, 704.0], [64.8, 704.0], [64.9, 705.0], [65.0, 705.0], [65.1, 705.0], [65.2, 705.0], [65.3, 705.0], [65.4, 706.0], [65.5, 706.0], [65.6, 706.0], [65.7, 706.0], [65.8, 707.0], [65.9, 707.0], [66.0, 707.0], [66.1, 708.0], [66.2, 708.0], [66.3, 709.0], [66.4, 709.0], [66.5, 709.0], [66.6, 710.0], [66.7, 711.0], [66.8, 711.0], [66.9, 712.0], [67.0, 713.0], [67.1, 714.0], [67.2, 716.0], [67.3, 717.0], [67.4, 719.0], [67.5, 720.0], [67.6, 721.0], [67.7, 723.0], [67.8, 724.0], [67.9, 725.0], [68.0, 727.0], [68.1, 728.0], [68.2, 729.0], [68.3, 730.0], [68.4, 731.0], [68.5, 732.0], [68.6, 733.0], [68.7, 734.0], [68.8, 735.0], [68.9, 736.0], [69.0, 737.0], [69.1, 738.0], [69.2, 739.0], [69.3, 740.0], [69.4, 741.0], [69.5, 742.0], [69.6, 744.0], [69.7, 745.0], [69.8, 746.0], [69.9, 747.0], [70.0, 748.0], [70.1, 749.0], [70.2, 751.0], [70.3, 752.0], [70.4, 753.0], [70.5, 755.0], [70.6, 757.0], [70.7, 758.0], [70.8, 760.0], [70.9, 761.0], [71.0, 763.0], [71.1, 765.0], [71.2, 766.0], [71.3, 768.0], [71.4, 770.0], [71.5, 772.0], [71.6, 773.0], [71.7, 774.0], [71.8, 776.0], [71.9, 777.0], [72.0, 779.0], [72.1, 780.0], [72.2, 781.0], [72.3, 782.0], [72.4, 784.0], [72.5, 785.0], [72.6, 787.0], [72.7, 788.0], [72.8, 789.0], [72.9, 790.0], [73.0, 792.0], [73.1, 793.0], [73.2, 795.0], [73.3, 796.0], [73.4, 798.0], [73.5, 800.0], [73.6, 801.0], [73.7, 804.0], [73.8, 805.0], [73.9, 807.0], [74.0, 809.0], [74.1, 811.0], [74.2, 813.0], [74.3, 815.0], [74.4, 816.0], [74.5, 818.0], [74.6, 820.0], [74.7, 822.0], [74.8, 824.0], [74.9, 826.0], [75.0, 827.0], [75.1, 829.0], [75.2, 831.0], [75.3, 833.0], [75.4, 834.0], [75.5, 836.0], [75.6, 838.0], [75.7, 840.0], [75.8, 842.0], [75.9, 844.0], [76.0, 847.0], [76.1, 849.0], [76.2, 852.0], [76.3, 855.0], [76.4, 858.0], [76.5, 861.0], [76.6, 864.0], [76.7, 867.0], [76.8, 871.0], [76.9, 875.0], [77.0, 878.0], [77.1, 881.0], [77.2, 884.0], [77.3, 887.0], [77.4, 889.0], [77.5, 892.0], [77.6, 893.0], [77.7, 895.0], [77.8, 897.0], [77.9, 900.0], [78.0, 903.0], [78.1, 905.0], [78.2, 906.0], [78.3, 909.0], [78.4, 911.0], [78.5, 914.0], [78.6, 916.0], [78.7, 920.0], [78.8, 922.0], [78.9, 926.0], [79.0, 928.0], [79.1, 931.0], [79.2, 933.0], [79.3, 935.0], [79.4, 938.0], [79.5, 940.0], [79.6, 943.0], [79.7, 945.0], [79.8, 947.0], [79.9, 950.0], [80.0, 952.0], [80.1, 954.0], [80.2, 956.0], [80.3, 959.0], [80.4, 962.0], [80.5, 964.0], [80.6, 966.0], [80.7, 970.0], [80.8, 974.0], [80.9, 978.0], [81.0, 985.0], [81.1, 991.0], [81.2, 1000.0], [81.3, 1009.0], [81.4, 1018.0], [81.5, 1025.0], [81.6, 1028.0], [81.7, 1031.0], [81.8, 1034.0], [81.9, 1036.0], [82.0, 1038.0], [82.1, 1041.0], [82.2, 1044.0], [82.3, 1046.0], [82.4, 1050.0], [82.5, 1054.0], [82.6, 1058.0], [82.7, 1063.0], [82.8, 1069.0], [82.9, 1079.0], [83.0, 1089.0], [83.1, 1105.0], [83.2, 1115.0], [83.3, 1122.0], [83.4, 1125.0], [83.5, 1130.0], [83.6, 1133.0], [83.7, 1138.0], [83.8, 1143.0], [83.9, 1149.0], [84.0, 1154.0], [84.1, 1163.0], [84.2, 1175.0], [84.3, 1187.0], [84.4, 1197.0], [84.5, 1207.0], [84.6, 1215.0], [84.7, 1220.0], [84.8, 1223.0], [84.9, 1226.0], [85.0, 1228.0], [85.1, 1231.0], [85.2, 1233.0], [85.3, 1235.0], [85.4, 1236.0], [85.5, 1238.0], [85.6, 1240.0], [85.7, 1242.0], [85.8, 1245.0], [85.9, 1248.0], [86.0, 1253.0], [86.1, 1261.0], [86.2, 1273.0], [86.3, 1285.0], [86.4, 1298.0], [86.5, 1313.0], [86.6, 1330.0], [86.7, 1338.0], [86.8, 1344.0], [86.9, 1350.0], [87.0, 1359.0], [87.1, 1369.0], [87.2, 1383.0], [87.3, 1397.0], [87.4, 1410.0], [87.5, 1419.0], [87.6, 1429.0], [87.7, 1438.0], [87.8, 1444.0], [87.9, 1454.0], [88.0, 1465.0], [88.1, 1476.0], [88.2, 1485.0], [88.3, 1493.0], [88.4, 1502.0], [88.5, 1513.0], [88.6, 1521.0], [88.7, 1529.0], [88.8, 1537.0], [88.9, 1542.0], [89.0, 1548.0], [89.1, 1557.0], [89.2, 1571.0], [89.3, 1588.0], [89.4, 1604.0], [89.5, 1620.0], [89.6, 1637.0], [89.7, 1650.0], [89.8, 1667.0], [89.9, 1682.0], [90.0, 1700.0], [90.1, 1726.0], [90.2, 1736.0], [90.3, 1751.0], [90.4, 1766.0], [90.5, 1780.0], [90.6, 1791.0], [90.7, 1800.0], [90.8, 1810.0], [90.9, 1821.0], [91.0, 1834.0], [91.1, 1859.0], [91.2, 1877.0], [91.3, 1892.0], [91.4, 1909.0], [91.5, 1929.0], [91.6, 1949.0], [91.7, 1970.0], [91.8, 1983.0], [91.9, 2003.0], [92.0, 2022.0], [92.1, 2037.0], [92.2, 2051.0], [92.3, 2066.0], [92.4, 2084.0], [92.5, 2095.0], [92.6, 2108.0], [92.7, 2117.0], [92.8, 2131.0], [92.9, 2149.0], [93.0, 2169.0], [93.1, 2184.0], [93.2, 2198.0], [93.3, 2214.0], [93.4, 2232.0], [93.5, 2252.0], [93.6, 2268.0], [93.7, 2281.0], [93.8, 2293.0], [93.9, 2307.0], [94.0, 2327.0], [94.1, 2338.0], [94.2, 2354.0], [94.3, 2364.0], [94.4, 2380.0], [94.5, 2393.0], [94.6, 2405.0], [94.7, 2420.0], [94.8, 2432.0], [94.9, 2442.0], [95.0, 2453.0], [95.1, 2470.0], [95.2, 2477.0], [95.3, 2485.0], [95.4, 2495.0], [95.5, 2508.0], [95.6, 2526.0], [95.7, 2540.0], [95.8, 2550.0], [95.9, 2562.0], [96.0, 2581.0], [96.1, 2598.0], [96.2, 2615.0], [96.3, 2627.0], [96.4, 2632.0], [96.5, 2641.0], [96.6, 2651.0], [96.7, 2659.0], [96.8, 2666.0], [96.9, 2673.0], [97.0, 2681.0], [97.1, 2693.0], [97.2, 2705.0], [97.3, 2711.0], [97.4, 2717.0], [97.5, 2724.0], [97.6, 2727.0], [97.7, 2733.0], [97.8, 2740.0], [97.9, 2746.0], [98.0, 2752.0], [98.1, 2757.0], [98.2, 2761.0], [98.3, 2765.0], [98.4, 2774.0], [98.5, 2780.0], [98.6, 2789.0], [98.7, 2801.0], [98.8, 2822.0], [98.9, 2846.0], [99.0, 2880.0], [99.1, 2894.0], [99.2, 2911.0], [99.3, 2941.0], [99.4, 2967.0], [99.5, 2992.0], [99.6, 3023.0], [99.7, 3058.0], [99.8, 3136.0], [99.9, 3219.0]], "isOverall": false, "label": "Create User", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 300.0, "maxY": 24432.0, "series": [{"data": [[600.0, 24432.0], [700.0, 4876.0], [800.0, 1765.0], [900.0, 1319.0], [1000.0, 750.0], [1100.0, 545.0], [1200.0, 794.0], [1300.0, 365.0], [1400.0, 424.0], [1500.0, 399.0], [1600.0, 246.0], [1700.0, 276.0], [1800.0, 260.0], [1900.0, 217.0], [2000.0, 261.0], [2100.0, 277.0], [2300.0, 289.0], [2200.0, 250.0], [2400.0, 344.0], [2500.0, 273.0], [2600.0, 414.0], [2700.0, 617.0], [2800.0, 178.0], [2900.0, 156.0], [3000.0, 92.0], [3100.0, 42.0], [3200.0, 47.0], [3300.0, 7.0], [3400.0, 1.0], [300.0, 20.0], [400.0, 11.0], [500.0, 53.0]], "isOverall": false, "label": "Create User", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 3400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 31.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 35326.0, "series": [{"data": [[0.0, 31.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 35326.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 4643.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 6.569565217391304, "minX": 1.64122488E12, "maxY": 8.0, "series": [{"data": [[1.64122872E12, 8.0], [1.6412259E12, 8.0], [1.64122488E12, 7.863636363636363], [1.6412265E12, 8.0], [1.64122812E12, 8.0], [1.64122548E12, 8.0], [1.6412277E12, 8.0], [1.64122608E12, 8.0], [1.6412271E12, 8.0], [1.64122932E12, 8.0], [1.64122668E12, 8.0], [1.6412289E12, 8.0], [1.64122728E12, 8.0], [1.6412283E12, 8.0], [1.64122506E12, 8.0], [1.64122848E12, 8.0], [1.64122566E12, 8.0], [1.64122626E12, 8.0], [1.64122788E12, 8.0], [1.6412295E12, 8.0], [1.64122524E12, 8.0], [1.64122746E12, 8.0], [1.64122686E12, 8.0], [1.64122584E12, 8.0], [1.64122908E12, 8.0], [1.64122644E12, 8.0], [1.64122866E12, 8.0], [1.64122704E12, 8.0], [1.64122806E12, 8.0], [1.64122824E12, 8.0], [1.64122542E12, 8.0], [1.64122602E12, 8.0], [1.64122764E12, 8.0], [1.64122926E12, 8.0], [1.641225E12, 8.0], [1.64122722E12, 8.0], [1.64122944E12, 8.0], [1.64122662E12, 8.0], [1.6412256E12, 8.0], [1.64122884E12, 8.0], [1.6412262E12, 8.0], [1.64122842E12, 8.0], [1.6412268E12, 8.0], [1.64122782E12, 8.0], [1.64122518E12, 8.0], [1.641228E12, 8.0], [1.64122902E12, 8.0], [1.64122578E12, 8.0], [1.6412274E12, 8.0], [1.64122698E12, 8.0], [1.6412292E12, 8.0], [1.64122638E12, 8.0], [1.64122536E12, 8.0], [1.6412286E12, 8.0], [1.64122596E12, 8.0], [1.64122818E12, 8.0], [1.64122656E12, 8.0], [1.64122758E12, 8.0], [1.64122494E12, 8.0], [1.64122776E12, 8.0], [1.64122938E12, 8.0], [1.64122878E12, 8.0], [1.64122554E12, 8.0], [1.64122716E12, 8.0], [1.64122614E12, 8.0], [1.64122896E12, 8.0], [1.64122512E12, 8.0], [1.64122674E12, 8.0], [1.64122836E12, 8.0], [1.64122572E12, 8.0], [1.64122794E12, 8.0], [1.64122632E12, 8.0], [1.64122734E12, 8.0], [1.64122956E12, 6.569565217391304], [1.64122692E12, 8.0], [1.64122752E12, 8.0], [1.64122914E12, 8.0], [1.64122854E12, 8.0], [1.6412253E12, 8.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.64122956E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 513.6666666666666, "minX": 1.0, "maxY": 931.8985191310302, "series": [{"data": [[8.0, 931.8985191310302], [4.0, 686.4516129032257], [2.0, 689.0], [1.0, 682.75], [5.0, 513.6666666666666], [6.0, 669.1764705882352], [3.0, 687.6086956521739], [7.0, 659.7000000000002]], "isOverall": false, "label": "Create User", "isController": false}, {"data": [[7.9915500000000375, 931.3136249999991]], "isOverall": false, "label": "Create User-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 8.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 678.55, "minX": 1.64122488E12, "maxY": 20434.15, "series": [{"data": [[1.64122872E12, 15682.633333333333], [1.6412259E12, 6166.2], [1.64122488E12, 678.55], [1.6412265E12, 9515.783333333333], [1.64122812E12, 15612.183333333332], [1.64122548E12, 4735.333333333333], [1.6412277E12, 15083.55], [1.64122608E12, 7142.416666666667], [1.6412271E12, 13520.25], [1.64122932E12, 15797.4], [1.64122668E12, 11066.716666666667], [1.6412289E12, 15728.716666666667], [1.64122728E12, 13954.95], [1.6412283E12, 15520.9], [1.64122506E12, 1968.55], [1.64122848E12, 15636.55], [1.64122566E12, 5325.583333333333], [1.64122626E12, 8077.85], [1.64122788E12, 15313.966666666667], [1.6412295E12, 15797.4], [1.64122524E12, 2264.1666666666665], [1.64122746E12, 14532.316666666668], [1.64122686E12, 11527.55], [1.64122584E12, 6238.416666666667], [1.64122908E12, 15774.8], [1.64122644E12, 9514.9], [1.64122866E12, 15796.516666666666], [1.64122704E12, 12420.433333333332], [1.64122806E12, 15635.666666666666], [1.64122824E12, 15703.466666666667], [1.64122542E12, 3140.8166666666666], [1.64122602E12, 7005.05], [1.64122764E12, 15060.066666666668], [1.64122926E12, 15820.0], [1.641225E12, 1878.9833333333333], [1.64122722E12, 13475.933333333332], [1.64122944E12, 15842.6], [1.64122662E12, 9242.816666666668], [1.6412256E12, 5595.9], [1.64122884E12, 15796.516666666666], [1.6412262E12, 7898.816666666667], [1.64122842E12, 15456.633333333333], [1.6412268E12, 11411.016666666666], [1.64122782E12, 15290.483333333334], [1.64122518E12, 2088.266666666667], [1.641228E12, 15451.333333333334], [1.64122902E12, 15728.716666666667], [1.64122578E12, 6052.316666666667], [1.6412274E12, 14185.366666666667], [1.64122698E12, 12537.85], [1.6412292E12, 15752.2], [1.64122638E12, 8328.216666666667], [1.64122536E12, 2512.7166666666667], [1.6412286E12, 15706.116666666667], [1.64122596E12, 6237.533333333334], [1.64122818E12, 15475.7], [1.64122656E12, 9745.316666666668], [1.64122758E12, 14922.7], [1.64122494E12, 1847.0666666666666], [1.64122776E12, 15382.65], [1.64122938E12, 15774.8], [1.64122878E12, 15774.8], [1.64122554E12, 5322.933333333333], [1.64122716E12, 13659.383333333333], [1.64122614E12, 7057.316666666667], [1.64122896E12, 15774.8], [1.64122512E12, 2054.733333333333], [1.64122674E12, 11202.316666666668], [1.64122836E12, 15705.233333333334], [1.64122572E12, 5351.716666666666], [1.64122794E12, 15107.916666666666], [1.64122632E12, 7653.75], [1.64122734E12, 14141.05], [1.64122956E12, 5198.0], [1.64122692E12, 12349.983333333334], [1.64122752E12, 14898.333333333334], [1.64122914E12, 15797.4], [1.64122854E12, 15567.866666666667], [1.6412253E12, 2316.8166666666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.64122872E12, 20230.1], [1.6412259E12, 8103.7], [1.64122488E12, 1923.9], [1.6412265E12, 12388.75], [1.64122812E12, 20142.65], [1.64122548E12, 6267.25], [1.6412277E12, 19472.2], [1.64122608E12, 9357.15], [1.6412271E12, 17490.0], [1.64122932E12, 20375.85], [1.64122668E12, 14370.95], [1.6412289E12, 20288.4], [1.64122728E12, 18043.85], [1.6412283E12, 20026.05], [1.64122506E12, 5684.25], [1.64122848E12, 20171.8], [1.64122566E12, 7025.15], [1.64122626E12, 10552.3], [1.64122788E12, 19763.7], [1.6412295E12, 20375.85], [1.64122524E12, 6471.3], [1.64122746E12, 18772.6], [1.64122686E12, 14953.95], [1.64122584E12, 8191.15], [1.64122908E12, 20346.7], [1.64122644E12, 12388.75], [1.64122866E12, 20375.85], [1.64122704E12, 16090.8], [1.64122806E12, 20171.8], [1.64122824E12, 20259.25], [1.64122542E12, 6791.95], [1.64122602E12, 9182.25], [1.64122764E12, 19443.05], [1.64122926E12, 20405.0], [1.641225E12, 5421.9], [1.64122722E12, 17431.7], [1.64122944E12, 20434.15], [1.64122662E12, 12038.95], [1.6412256E12, 7374.95], [1.64122884E12, 20375.85], [1.6412262E12, 10319.1], [1.64122842E12, 19938.6], [1.6412268E12, 14808.2], [1.64122782E12, 19734.55], [1.64122518E12, 6004.9], [1.641228E12, 19938.6], [1.64122902E12, 20288.4], [1.64122578E12, 7957.95], [1.6412274E12, 18335.35], [1.64122698E12, 16236.55], [1.6412292E12, 20317.55], [1.64122638E12, 10872.95], [1.64122536E12, 7141.75], [1.6412286E12, 20259.25], [1.64122596E12, 8191.15], [1.64122818E12, 19967.75], [1.64122656E12, 12680.25], [1.64122758E12, 19268.15], [1.64122494E12, 5363.6], [1.64122776E12, 19851.15], [1.64122938E12, 20346.7], [1.64122878E12, 20346.7], [1.64122554E12, 7025.15], [1.64122716E12, 17664.9], [1.64122614E12, 9240.55], [1.64122896E12, 20346.7], [1.64122512E12, 5917.45], [1.64122674E12, 14545.85], [1.64122836E12, 20259.25], [1.64122572E12, 7054.3], [1.64122794E12, 19501.35], [1.64122632E12, 9998.45], [1.64122734E12, 18277.05], [1.64122956E12, 6704.5], [1.64122692E12, 16003.35], [1.64122752E12, 19239.0], [1.64122914E12, 20375.85], [1.64122854E12, 20084.35], [1.6412253E12, 6617.05]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.64122956E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 685.9347826086955, "minX": 1.64122488E12, "maxY": 2649.184782608695, "series": [{"data": [[1.64122872E12, 690.4538904899132], [1.6412259E12, 1742.7697841726613], [1.64122488E12, 2000.121212121212], [1.6412265E12, 1125.105882352941], [1.64122812E12, 694.6353111432705], [1.64122548E12, 2226.6558139534886], [1.6412277E12, 717.534431137725], [1.64122608E12, 1501.3271028037384], [1.6412271E12, 797.2933333333331], [1.64122932E12, 686.027181688126], [1.64122668E12, 974.9695740365106], [1.6412289E12, 689.1709770114952], [1.64122728E12, 778.4378029079157], [1.6412283E12, 699.1280931586607], [1.64122506E12, 2454.528205128205], [1.64122848E12, 695.5390173410393], [1.64122566E12, 1998.593360995852], [1.64122626E12, 1330.4917127071828], [1.64122788E12, 708.0368731563426], [1.6412295E12, 686.5064377682404], [1.64122524E12, 2149.0765765765755], [1.64122746E12, 742.0263975155281], [1.64122686E12, 936.4912280701756], [1.64122584E12, 1679.8647686832742], [1.64122908E12, 687.2363896848132], [1.64122644E12, 1144.3576470588248], [1.64122866E12, 688.6466380543625], [1.64122704E12, 870.2789855072463], [1.64122806E12, 693.5303468208091], [1.64122824E12, 693.0618705035971], [1.64122542E12, 2052.49356223176], [1.64122602E12, 1522.7809523809515], [1.64122764E12, 719.1649175412298], [1.64122926E12, 686.445714285715], [1.641225E12, 2567.193548387096], [1.64122722E12, 800.4364548494974], [1.64122944E12, 685.9728958630525], [1.64122662E12, 1156.5351089588394], [1.6412256E12, 1899.4782608695662], [1.64122884E12, 688.1273247496429], [1.6412262E12, 1359.2514124293782], [1.64122842E12, 701.4970760233925], [1.6412268E12, 943.767716535433], [1.64122782E12, 710.2348596750368], [1.64122518E12, 2325.3495145631073], [1.641228E12, 702.1052631578943], [1.64122902E12, 689.854885057471], [1.64122578E12, 1782.1868131868127], [1.6412274E12, 763.4578696343408], [1.64122698E12, 861.1328545780965], [1.6412292E12, 686.8550932568149], [1.64122638E12, 1291.8016085790894], [1.64122536E12, 1962.7918367346936], [1.6412286E12, 689.2273381294959], [1.64122596E12, 1716.5302491103196], [1.64122818E12, 697.4729927007294], [1.64122656E12, 1110.2390804597692], [1.64122758E12, 724.2571860816943], [1.64122494E12, 2649.184782608695], [1.64122776E12, 704.6152716593242], [1.64122938E12, 686.47564469914], [1.64122878E12, 687.1948424068765], [1.64122554E12, 1994.9585062240662], [1.64122716E12, 795.6584158415837], [1.64122614E12, 1513.1829652996855], [1.64122896E12, 686.2607449856733], [1.64122512E12, 2380.55172413793], [1.64122674E12, 965.6833667334663], [1.64122836E12, 689.835971223021], [1.64122572E12, 1952.2727272727268], [1.64122794E12, 715.9656203288484], [1.64122632E12, 1371.513119533527], [1.64122734E12, 763.9074960127587], [1.64122956E12, 685.9347826086955], [1.64122692E12, 872.9963570127497], [1.64122752E12, 730.0151515151516], [1.64122914E12, 687.6623748211732], [1.64122854E12, 694.957910014514], [1.6412253E12, 2128.5110132158593]], "isOverall": false, "label": "Create User", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.64122956E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 685.9347826086955, "minX": 1.64122488E12, "maxY": 2649.1195652173906, "series": [{"data": [[1.64122872E12, 690.451008645533], [1.6412259E12, 1742.7625899280586], [1.64122488E12, 2000.0303030303035], [1.6412265E12, 1125.103529411763], [1.64122812E12, 694.632416787265], [1.64122548E12, 2226.6558139534886], [1.6412277E12, 717.5284431137724], [1.64122608E12, 1501.3146417445494], [1.6412271E12, 797.2933333333331], [1.64122932E12, 686.0214592274675], [1.64122668E12, 974.9655172413799], [1.6412289E12, 689.1623563218383], [1.64122728E12, 778.4313408723742], [1.6412283E12, 699.1222707423583], [1.64122506E12, 2454.517948717951], [1.64122848E12, 695.5375722543351], [1.64122566E12, 1998.5767634854767], [1.64122626E12, 1330.4861878453032], [1.64122788E12, 708.0294985250745], [1.6412295E12, 686.5007153075826], [1.64122524E12, 2149.031531531531], [1.64122746E12, 742.0217391304341], [1.64122686E12, 936.4912280701756], [1.64122584E12, 1679.8398576512443], [1.64122908E12, 687.2306590257874], [1.64122644E12, 1144.3552941176458], [1.64122866E12, 688.6423462088702], [1.64122704E12, 870.2753623188415], [1.64122806E12, 693.5274566473984], [1.64122824E12, 693.0575539568352], [1.64122542E12, 2052.4678111588005], [1.64122602E12, 1522.7587301587293], [1.64122764E12, 719.1634182908554], [1.64122926E12, 686.4442857142851], [1.641225E12, 2567.145161290322], [1.64122722E12, 800.434782608696], [1.64122944E12, 685.9686162624823], [1.64122662E12, 1156.523002421307], [1.6412256E12, 1899.470355731226], [1.64122884E12, 688.1201716738202], [1.6412262E12, 1359.2485875706207], [1.64122842E12, 701.4926900584796], [1.6412268E12, 943.7539370078745], [1.64122782E12, 710.2319054652874], [1.64122518E12, 2325.3300970873784], [1.641228E12, 702.0964912280702], [1.64122902E12, 689.8505747126434], [1.64122578E12, 1782.1831501831502], [1.6412274E12, 763.4483306836242], [1.64122698E12, 861.1310592459595], [1.6412292E12, 686.8464849354382], [1.64122638E12, 1291.8016085790894], [1.64122536E12, 1962.7836734693876], [1.6412286E12, 689.221582733813], [1.64122596E12, 1716.5160142348761], [1.64122818E12, 697.4700729927011], [1.64122656E12, 1110.2298850574707], [1.64122758E12, 724.2541603630866], [1.64122494E12, 2649.1195652173906], [1.64122776E12, 704.6123348017621], [1.64122938E12, 686.4699140401149], [1.64122878E12, 687.1919770773644], [1.64122554E12, 1994.9419087136926], [1.64122716E12, 795.6501650165015], [1.64122614E12, 1513.1766561514187], [1.64122896E12, 686.255014326648], [1.64122512E12, 2380.5270935960584], [1.64122674E12, 965.6793587174359], [1.64122836E12, 689.8302158273372], [1.64122572E12, 1952.260330578512], [1.64122794E12, 715.9611360239159], [1.64122632E12, 1371.510204081632], [1.64122734E12, 763.9027113237635], [1.64122956E12, 685.9347826086955], [1.64122692E12, 872.9890710382518], [1.64122752E12, 730.0075757575755], [1.64122914E12, 687.6623748211732], [1.64122854E12, 694.9506531204645], [1.6412253E12, 2128.475770925111]], "isOverall": false, "label": "Create User", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.64122956E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 139.79565217391306, "minX": 1.64122488E12, "maxY": 147.2602339181284, "series": [{"data": [[1.64122872E12, 140.3659942363114], [1.6412259E12, 141.57194244604324], [1.64122488E12, 144.13636363636368], [1.6412265E12, 141.6141176470586], [1.64122812E12, 140.20260492040524], [1.64122548E12, 141.1674418604652], [1.6412277E12, 140.99101796407194], [1.64122608E12, 141.74454828660436], [1.6412271E12, 141.38666666666654], [1.64122932E12, 139.95422031473535], [1.64122668E12, 141.86612576064914], [1.6412289E12, 140.469827586207], [1.64122728E12, 140.92245557350574], [1.6412283E12, 140.29839883551674], [1.64122506E12, 142.47692307692307], [1.64122848E12, 142.2196531791908], [1.64122566E12, 141.19502074688805], [1.64122626E12, 141.6491712707182], [1.64122788E12, 140.4410029498526], [1.6412295E12, 139.97997138769657], [1.64122524E12, 142.18918918918925], [1.64122746E12, 140.9208074534164], [1.64122686E12, 141.58089668615995], [1.64122584E12, 141.6192170818506], [1.64122908E12, 140.62750716332366], [1.64122644E12, 141.86352941176477], [1.64122866E12, 140.26323319027185], [1.64122704E12, 141.7264492753621], [1.64122806E12, 140.3208092485549], [1.64122824E12, 140.29064748201446], [1.64122542E12, 142.06866952789707], [1.64122602E12, 141.4507936507937], [1.64122764E12, 140.30434782608705], [1.64122926E12, 140.18571428571406], [1.641225E12, 142.64516129032265], [1.64122722E12, 141.25752508361194], [1.64122944E12, 140.00427960057053], [1.64122662E12, 141.55205811138012], [1.6412256E12, 142.110671936759], [1.64122884E12, 140.13304721030056], [1.6412262E12, 141.9943502824857], [1.64122842E12, 147.2602339181284], [1.6412268E12, 141.75787401574806], [1.64122782E12, 140.62333825701612], [1.64122518E12, 142.5048543689321], [1.641228E12, 139.9912280701753], [1.64122902E12, 140.8002873563219], [1.64122578E12, 141.89377289377285], [1.6412274E12, 140.5484896661367], [1.64122698E12, 140.68940754039502], [1.6412292E12, 140.35150645624103], [1.64122638E12, 141.95174262734577], [1.64122536E12, 143.0204081632653], [1.6412286E12, 140.231654676259], [1.64122596E12, 141.43060498220635], [1.64122818E12, 140.2102189781023], [1.64122656E12, 142.4091954022989], [1.64122758E12, 140.13918305597585], [1.64122494E12, 142.83695652173913], [1.64122776E12, 140.2731277533042], [1.64122938E12, 140.15902578796562], [1.64122878E12, 140.29226361031513], [1.64122554E12, 141.41078838174272], [1.64122716E12, 141.10726072607272], [1.64122614E12, 142.3627760252365], [1.64122896E12, 140.2736389684815], [1.64122512E12, 143.04433497536942], [1.64122674E12, 142.06412825651296], [1.64122836E12, 140.07625899280578], [1.64122572E12, 141.21074380165285], [1.64122794E12, 140.26756352765318], [1.64122632E12, 141.85422740524788], [1.64122734E12, 141.19298245614021], [1.64122956E12, 139.79565217391306], [1.64122692E12, 141.4098360655741], [1.64122752E12, 140.6030303030302], [1.64122914E12, 140.76108726752494], [1.64122854E12, 140.52249637155302], [1.6412253E12, 142.97356828193836]], "isOverall": false, "label": "Create User", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.64122956E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 374.0, "minX": 1.64122488E12, "maxY": 3483.0, "series": [{"data": [[1.64122872E12, 1255.0], [1.6412259E12, 3302.0], [1.64122488E12, 3483.0], [1.6412265E12, 2577.0], [1.64122812E12, 1266.0], [1.64122548E12, 3249.0], [1.6412277E12, 1431.0], [1.64122608E12, 3201.0], [1.6412271E12, 1620.0], [1.64122932E12, 716.0], [1.64122668E12, 2254.0], [1.6412289E12, 1224.0], [1.64122728E12, 1884.0], [1.6412283E12, 1246.0], [1.64122506E12, 3235.0], [1.64122848E12, 1247.0], [1.64122566E12, 3305.0], [1.64122626E12, 3044.0], [1.64122788E12, 1409.0], [1.6412295E12, 725.0], [1.64122524E12, 3277.0], [1.64122746E12, 1632.0], [1.64122686E12, 2196.0], [1.64122584E12, 3221.0], [1.64122908E12, 720.0], [1.64122644E12, 2802.0], [1.64122866E12, 1253.0], [1.64122704E12, 1956.0], [1.64122806E12, 1253.0], [1.64122824E12, 1248.0], [1.64122542E12, 3226.0], [1.64122602E12, 3201.0], [1.64122764E12, 1446.0], [1.64122926E12, 717.0], [1.641225E12, 3230.0], [1.64122722E12, 1604.0], [1.64122944E12, 722.0], [1.64122662E12, 2586.0], [1.6412256E12, 3289.0], [1.64122884E12, 1237.0], [1.6412262E12, 2847.0], [1.64122842E12, 1699.0], [1.6412268E12, 2163.0], [1.64122782E12, 1425.0], [1.64122518E12, 3308.0], [1.641228E12, 1460.0], [1.64122902E12, 1253.0], [1.64122578E12, 3025.0], [1.6412274E12, 1629.0], [1.64122698E12, 2253.0], [1.6412292E12, 719.0], [1.64122638E12, 3053.0], [1.64122536E12, 3070.0], [1.6412286E12, 1215.0], [1.64122596E12, 3291.0], [1.64122818E12, 1250.0], [1.64122656E12, 2572.0], [1.64122758E12, 1515.0], [1.64122494E12, 3315.0], [1.64122776E12, 1387.0], [1.64122938E12, 817.0], [1.64122878E12, 714.0], [1.64122554E12, 3311.0], [1.64122716E12, 2086.0], [1.64122614E12, 2967.0], [1.64122896E12, 716.0], [1.64122512E12, 3225.0], [1.64122674E12, 2490.0], [1.64122836E12, 1285.0], [1.64122572E12, 3275.0], [1.64122794E12, 1545.0], [1.64122632E12, 3002.0], [1.64122734E12, 1550.0], [1.64122956E12, 725.0], [1.64122692E12, 2180.0], [1.64122752E12, 1551.0], [1.64122914E12, 819.0], [1.64122854E12, 1244.0], [1.6412253E12, 3287.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.64122872E12, 699.5], [1.6412259E12, 2662.7], [1.64122488E12, 3262.8], [1.6412265E12, 1790.8000000000002], [1.64122812E12, 700.0], [1.64122548E12, 2956.4], [1.6412277E12, 774.1], [1.64122608E12, 2402.4], [1.6412271E12, 1001.0], [1.64122932E12, 698.0], [1.64122668E12, 1515.4], [1.6412289E12, 700.0], [1.64122728E12, 953.0], [1.6412283E12, 703.2], [1.64122506E12, 2833.2], [1.64122848E12, 704.0], [1.64122566E12, 2947.0], [1.64122626E12, 2286.8999999999996], [1.64122788E12, 734.0], [1.6412295E12, 697.0], [1.64122524E12, 2775.1], [1.64122746E12, 882.0], [1.64122686E12, 1438.4], [1.64122584E12, 2606.2000000000003], [1.64122908E12, 698.0], [1.64122644E12, 1964.0000000000007], [1.64122866E12, 699.0], [1.64122704E12, 1237.7], [1.64122806E12, 699.0], [1.64122824E12, 700.0], [1.64122542E12, 2862.8], [1.64122602E12, 2340.0], [1.64122764E12, 798.4000000000001], [1.64122926E12, 698.0], [1.641225E12, 2876.6000000000013], [1.64122722E12, 1063.5], [1.64122944E12, 697.0], [1.64122662E12, 1900.6000000000004], [1.6412256E12, 2880.8], [1.64122884E12, 698.0], [1.6412262E12, 2253.0], [1.64122842E12, 705.0], [1.6412268E12, 1474.0000000000002], [1.64122782E12, 762.6000000000001], [1.64122518E12, 2801.6], [1.641228E12, 703.5], [1.64122902E12, 700.0], [1.64122578E12, 2710.0], [1.6412274E12, 936.0], [1.64122698E12, 1232.0], [1.6412292E12, 698.0], [1.64122638E12, 2205.4], [1.64122536E12, 2729.2], [1.6412286E12, 700.0], [1.64122596E12, 2588.2000000000003], [1.64122818E12, 703.0], [1.64122656E12, 1797.8000000000002], [1.64122758E12, 811.6000000000001], [1.64122494E12, 2983.5], [1.64122776E12, 716.0], [1.64122938E12, 697.0], [1.64122878E12, 699.0], [1.64122554E12, 2932.4], [1.64122716E12, 989.0000000000041], [1.64122614E12, 2522.8], [1.64122896E12, 697.0], [1.64122512E12, 2801.2], [1.64122674E12, 1507.0], [1.64122836E12, 699.0], [1.64122572E12, 2929.7000000000003], [1.64122794E12, 762.0], [1.64122632E12, 2338.4000000000005], [1.64122734E12, 918.4000000000001], [1.64122956E12, 696.0], [1.64122692E12, 1249.0], [1.64122752E12, 817.8], [1.64122914E12, 698.0], [1.64122854E12, 701.0], [1.6412253E12, 2783.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.64122872E12, 807.0], [1.6412259E12, 3258.399999999999], [1.64122488E12, 3483.0], [1.6412265E12, 2473.4800000000005], [1.64122812E12, 923.9600000000005], [1.64122548E12, 3194.36], [1.6412277E12, 1238.31], [1.64122608E12, 3060.2999999999993], [1.6412271E12, 1532.8500000000001], [1.64122932E12, 709.0], [1.64122668E12, 2051.14], [1.6412289E12, 761.5399999999995], [1.64122728E12, 1601.999999999999], [1.6412283E12, 1014.360000000001], [1.64122506E12, 3145.7199999999993], [1.64122848E12, 858.8500000000028], [1.64122566E12, 3269.5999999999995], [1.64122626E12, 2968.11], [1.64122788E12, 1237.8400000000001], [1.6412295E12, 708.0], [1.64122524E12, 3214.01], [1.64122746E12, 1414.3999999999905], [1.64122686E12, 1934.8600000000001], [1.64122584E12, 3115.7000000000003], [1.64122908E12, 708.0], [1.64122644E12, 2612.220000000001], [1.64122866E12, 780.0], [1.64122704E12, 1800.0], [1.64122806E12, 866.4600000000039], [1.64122824E12, 911.6399999999985], [1.64122542E12, 3195.24], [1.64122602E12, 3015.559999999999], [1.64122764E12, 1240.0], [1.64122926E12, 707.99], [1.641225E12, 3226.52], [1.64122722E12, 1536.01], [1.64122944E12, 708.0], [1.64122662E12, 2539.020000000001], [1.6412256E12, 3247.46], [1.64122884E12, 759.0], [1.6412262E12, 2757.7], [1.64122842E12, 1115.5499999999997], [1.6412268E12, 1852.0], [1.64122782E12, 1230.0], [1.64122518E12, 3137.2000000000003], [1.641228E12, 1222.1999999999998], [1.64122902E12, 774.3599999999997], [1.64122578E12, 2986.8799999999997], [1.6412274E12, 1423.700000000001], [1.64122698E12, 1827.84], [1.6412292E12, 707.0], [1.64122638E12, 2943.379999999999], [1.64122536E12, 3034.5399999999995], [1.6412286E12, 805.1199999999999], [1.64122596E12, 3036.7000000000003], [1.64122818E12, 1000.3999999999965], [1.64122656E12, 2423.0], [1.64122758E12, 1367.3999999999999], [1.64122494E12, 3314.15], [1.64122776E12, 1227.8999999999996], [1.64122938E12, 708.01], [1.64122878E12, 710.0], [1.64122554E12, 3260.7199999999993], [1.64122716E12, 1857.1099999999938], [1.64122614E12, 2823.2], [1.64122896E12, 709.0], [1.64122512E12, 3148.44], [1.64122674E12, 2132.0], [1.64122836E12, 816.6799999999994], [1.64122572E12, 3218.2099999999996], [1.64122794E12, 1289.3999999999946], [1.64122632E12, 2892.48], [1.64122734E12, 1376.9200000000017], [1.64122956E12, 710.69], [1.64122692E12, 2006.0], [1.64122752E12, 1249.56], [1.64122914E12, 709.0], [1.64122854E12, 907.7000000000011], [1.6412253E12, 3249.96]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.64122872E12, 704.0], [1.6412259E12, 2896.1], [1.64122488E12, 3284.95], [1.6412265E12, 2040.5], [1.64122812E12, 741.5999999999998], [1.64122548E12, 3037.6], [1.6412277E12, 894.6499999999999], [1.64122608E12, 2701.3999999999996], [1.6412271E12, 1239.0], [1.64122932E12, 702.0], [1.64122668E12, 1684.6999999999996], [1.6412289E12, 703.0], [1.64122728E12, 1233.0], [1.6412283E12, 788.8000000000002], [1.64122506E12, 2910.2], [1.64122848E12, 712.0], [1.64122566E12, 3065.099999999999], [1.64122626E12, 2627.25], [1.64122788E12, 826.0], [1.6412295E12, 701.0], [1.64122524E12, 2911.1], [1.64122746E12, 1059.75], [1.64122686E12, 1622.3], [1.64122584E12, 2841.2999999999997], [1.64122908E12, 701.0], [1.64122644E12, 2210.2999999999997], [1.64122866E12, 703.0], [1.64122704E12, 1531.7], [1.64122806E12, 712.7], [1.64122824E12, 709.0], [1.64122542E12, 3029.8999999999996], [1.64122602E12, 2721.9999999999995], [1.64122764E12, 893.6], [1.64122926E12, 702.0], [1.641225E12, 3015.3], [1.64122722E12, 1239.3499999999997], [1.64122944E12, 701.0], [1.64122662E12, 2113.8999999999996], [1.6412256E12, 2978.7999999999997], [1.64122884E12, 704.0], [1.6412262E12, 2462.25], [1.64122842E12, 712.0], [1.6412268E12, 1665.0499999999995], [1.64122782E12, 855.2], [1.64122518E12, 2956.1999999999994], [1.641228E12, 810.0], [1.64122902E12, 704.0], [1.64122578E12, 2843.2], [1.6412274E12, 1218.0], [1.64122698E12, 1505.9000000000005], [1.6412292E12, 701.0], [1.64122638E12, 2461.2], [1.64122536E12, 2789.0], [1.6412286E12, 703.0], [1.64122596E12, 2723.8999999999996], [1.64122818E12, 771.3999999999999], [1.64122656E12, 2116.2], [1.64122758E12, 917.8], [1.64122494E12, 3104.25], [1.64122776E12, 808.8], [1.64122938E12, 701.0], [1.64122878E12, 703.05], [1.64122554E12, 3020.9999999999995], [1.64122716E12, 1251.5499999999997], [1.64122614E12, 2677.6], [1.64122896E12, 701.0], [1.64122512E12, 2927.0], [1.64122674E12, 1680.0], [1.64122836E12, 705.0], [1.64122572E12, 3086.45], [1.64122794E12, 891.5], [1.64122632E12, 2655.0], [1.64122734E12, 1225.6], [1.64122956E12, 699.9], [1.64122692E12, 1493.0], [1.64122752E12, 927.5499999999994], [1.64122914E12, 702.0], [1.64122854E12, 710.0], [1.6412253E12, 2981.6]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.64122872E12, 669.0], [1.6412259E12, 709.0], [1.64122488E12, 378.0], [1.6412265E12, 674.0], [1.64122812E12, 667.0], [1.64122548E12, 698.0], [1.6412277E12, 666.0], [1.64122608E12, 677.0], [1.6412271E12, 665.0], [1.64122932E12, 668.0], [1.64122668E12, 675.0], [1.6412289E12, 666.0], [1.64122728E12, 666.0], [1.6412283E12, 663.0], [1.64122506E12, 522.0], [1.64122848E12, 668.0], [1.64122566E12, 677.0], [1.64122626E12, 677.0], [1.64122788E12, 668.0], [1.6412295E12, 666.0], [1.64122524E12, 516.0], [1.64122746E12, 668.0], [1.64122686E12, 671.0], [1.64122584E12, 680.0], [1.64122908E12, 667.0], [1.64122644E12, 673.0], [1.64122866E12, 668.0], [1.64122704E12, 669.0], [1.64122806E12, 667.0], [1.64122824E12, 663.0], [1.64122542E12, 424.0], [1.64122602E12, 675.0], [1.64122764E12, 666.0], [1.64122926E12, 669.0], [1.641225E12, 471.0], [1.64122722E12, 666.0], [1.64122944E12, 668.0], [1.64122662E12, 673.0], [1.6412256E12, 678.0], [1.64122884E12, 666.0], [1.6412262E12, 672.0], [1.64122842E12, 668.0], [1.6412268E12, 671.0], [1.64122782E12, 665.0], [1.64122518E12, 484.0], [1.641228E12, 666.0], [1.64122902E12, 667.0], [1.64122578E12, 677.0], [1.6412274E12, 668.0], [1.64122698E12, 669.0], [1.6412292E12, 667.0], [1.64122638E12, 676.0], [1.64122536E12, 374.0], [1.6412286E12, 666.0], [1.64122596E12, 688.0], [1.64122818E12, 666.0], [1.64122656E12, 670.0], [1.64122758E12, 668.0], [1.64122494E12, 553.0], [1.64122776E12, 668.0], [1.64122938E12, 668.0], [1.64122878E12, 666.0], [1.64122554E12, 680.0], [1.64122716E12, 668.0], [1.64122614E12, 674.0], [1.64122896E12, 667.0], [1.64122512E12, 520.0], [1.64122674E12, 672.0], [1.64122836E12, 665.0], [1.64122572E12, 684.0], [1.64122794E12, 669.0], [1.64122632E12, 672.0], [1.64122734E12, 669.0], [1.64122956E12, 670.0], [1.64122692E12, 669.0], [1.64122752E12, 666.0], [1.64122914E12, 666.0], [1.64122854E12, 667.0], [1.6412253E12, 475.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.64122872E12, 686.0], [1.6412259E12, 1715.0], [1.64122488E12, 2560.5], [1.6412265E12, 966.0], [1.64122812E12, 686.0], [1.64122548E12, 2499.0], [1.6412277E12, 689.0], [1.64122608E12, 1332.0], [1.6412271E12, 701.0], [1.64122932E12, 685.0], [1.64122668E12, 880.0], [1.6412289E12, 687.0], [1.64122728E12, 695.0], [1.6412283E12, 687.0], [1.64122506E12, 2646.0], [1.64122848E12, 690.0], [1.64122566E12, 1982.0], [1.64122626E12, 1135.5], [1.64122788E12, 688.0], [1.6412295E12, 686.0], [1.64122524E12, 2467.0], [1.64122746E12, 689.0], [1.64122686E12, 801.0], [1.64122584E12, 1592.0], [1.64122908E12, 686.0], [1.64122644E12, 921.0], [1.64122866E12, 687.0], [1.64122704E12, 767.5], [1.64122806E12, 685.0], [1.64122824E12, 685.0], [1.64122542E12, 2347.0], [1.64122602E12, 1342.0], [1.64122764E12, 688.0], [1.64122926E12, 686.0], [1.641225E12, 2725.0], [1.64122722E12, 699.0], [1.64122944E12, 685.0], [1.64122662E12, 1019.0], [1.6412256E12, 1826.0], [1.64122884E12, 686.0], [1.6412262E12, 1188.5], [1.64122842E12, 692.0], [1.6412268E12, 832.0], [1.64122782E12, 687.0], [1.64122518E12, 2584.0], [1.641228E12, 686.0], [1.64122902E12, 687.0], [1.64122578E12, 1783.0], [1.6412274E12, 693.0], [1.64122698E12, 724.0], [1.6412292E12, 686.0], [1.64122638E12, 1045.0], [1.64122536E12, 2294.0], [1.6412286E12, 686.0], [1.64122596E12, 1677.0], [1.64122818E12, 686.0], [1.64122656E12, 944.0], [1.64122758E12, 688.0], [1.64122494E12, 2762.5], [1.64122776E12, 687.0], [1.64122938E12, 686.0], [1.64122878E12, 687.0], [1.64122554E12, 2099.0], [1.64122716E12, 695.0], [1.64122614E12, 1399.0], [1.64122896E12, 686.0], [1.64122512E12, 2644.0], [1.64122674E12, 825.0], [1.64122836E12, 686.0], [1.64122572E12, 1913.0], [1.64122794E12, 688.0], [1.64122632E12, 1208.0], [1.64122734E12, 695.0], [1.64122956E12, 685.0], [1.64122692E12, 745.0], [1.64122752E12, 690.0], [1.64122914E12, 687.0], [1.64122854E12, 687.0], [1.6412253E12, 2464.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.64122956E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 390.0, "minX": 1.0, "maxY": 2272.0, "series": [{"data": [[2.0, 1740.5], [8.0, 861.0], [9.0, 698.0], [10.0, 689.0], [11.0, 688.0], [3.0, 2272.0], [12.0, 687.0], [13.0, 687.0], [14.0, 688.0], [15.0, 689.0], [1.0, 1991.0], [4.0, 2171.5], [16.0, 692.0], [17.0, 390.0], [5.0, 1875.0], [6.0, 1364.5], [7.0, 1037.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 17.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 389.0, "minX": 1.0, "maxY": 2272.0, "series": [{"data": [[2.0, 1740.5], [8.0, 861.0], [9.0, 698.0], [10.0, 689.0], [11.0, 688.0], [3.0, 2272.0], [12.0, 687.0], [13.0, 687.0], [14.0, 688.0], [15.0, 689.0], [1.0, 1991.0], [4.0, 2171.5], [16.0, 692.0], [17.0, 389.0], [5.0, 1875.0], [6.0, 1364.5], [7.0, 1037.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 17.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 1.2333333333333334, "minX": 1.64122488E12, "maxY": 11.683333333333334, "series": [{"data": [[1.64122872E12, 11.566666666666666], [1.6412259E12, 4.633333333333334], [1.64122488E12, 1.2333333333333334], [1.6412265E12, 7.083333333333333], [1.64122812E12, 11.516666666666667], [1.64122548E12, 3.5833333333333335], [1.6412277E12, 11.133333333333333], [1.64122608E12, 5.35], [1.6412271E12, 10.0], [1.64122932E12, 11.65], [1.64122668E12, 8.216666666666667], [1.6412289E12, 11.6], [1.64122728E12, 10.316666666666666], [1.6412283E12, 11.45], [1.64122506E12, 3.25], [1.64122848E12, 11.533333333333333], [1.64122566E12, 4.016666666666667], [1.64122626E12, 6.033333333333333], [1.64122788E12, 11.3], [1.6412295E12, 11.65], [1.64122524E12, 3.7], [1.64122746E12, 10.733333333333333], [1.64122686E12, 8.55], [1.64122584E12, 4.683333333333334], [1.64122908E12, 11.633333333333333], [1.64122644E12, 7.083333333333333], [1.64122866E12, 11.65], [1.64122704E12, 9.2], [1.64122806E12, 11.533333333333333], [1.64122824E12, 11.583333333333334], [1.64122542E12, 3.8833333333333333], [1.64122602E12, 5.25], [1.64122764E12, 11.116666666666667], [1.64122926E12, 11.666666666666666], [1.641225E12, 3.1], [1.64122722E12, 9.966666666666667], [1.64122944E12, 11.683333333333334], [1.64122662E12, 6.883333333333334], [1.6412256E12, 4.216666666666667], [1.64122884E12, 11.65], [1.6412262E12, 5.9], [1.64122842E12, 11.4], [1.6412268E12, 8.466666666666667], [1.64122782E12, 11.283333333333333], [1.64122518E12, 3.433333333333333], [1.641228E12, 11.4], [1.64122902E12, 11.6], [1.64122578E12, 4.55], [1.6412274E12, 10.483333333333333], [1.64122698E12, 9.283333333333333], [1.6412292E12, 11.616666666666667], [1.64122638E12, 6.216666666666667], [1.64122536E12, 4.083333333333333], [1.6412286E12, 11.583333333333334], [1.64122596E12, 4.683333333333334], [1.64122818E12, 11.416666666666666], [1.64122656E12, 7.25], [1.64122758E12, 11.016666666666667], [1.64122494E12, 3.066666666666667], [1.64122776E12, 11.35], [1.64122938E12, 11.633333333333333], [1.64122878E12, 11.633333333333333], [1.64122554E12, 4.016666666666667], [1.64122716E12, 10.1], [1.64122614E12, 5.283333333333333], [1.64122896E12, 11.633333333333333], [1.64122512E12, 3.3833333333333333], [1.64122674E12, 8.316666666666666], [1.64122836E12, 11.583333333333334], [1.64122572E12, 4.033333333333333], [1.64122794E12, 11.15], [1.64122632E12, 5.716666666666667], [1.64122734E12, 10.45], [1.64122956E12, 3.7], [1.64122692E12, 9.15], [1.64122752E12, 11.0], [1.64122914E12, 11.65], [1.64122854E12, 11.483333333333333], [1.6412253E12, 3.783333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.64122956E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 1.1, "minX": 1.64122488E12, "maxY": 11.683333333333334, "series": [{"data": [[1.64122872E12, 11.566666666666666], [1.6412259E12, 4.633333333333334], [1.64122488E12, 1.1], [1.6412265E12, 7.083333333333333], [1.64122812E12, 11.516666666666667], [1.64122548E12, 3.5833333333333335], [1.6412277E12, 11.133333333333333], [1.64122608E12, 5.35], [1.6412271E12, 10.0], [1.64122932E12, 11.65], [1.64122668E12, 8.216666666666667], [1.6412289E12, 11.6], [1.64122728E12, 10.316666666666666], [1.6412283E12, 11.45], [1.64122506E12, 3.25], [1.64122848E12, 11.533333333333333], [1.64122566E12, 4.016666666666667], [1.64122626E12, 6.033333333333333], [1.64122788E12, 11.3], [1.6412295E12, 11.65], [1.64122524E12, 3.7], [1.64122746E12, 10.733333333333333], [1.64122686E12, 8.55], [1.64122584E12, 4.683333333333334], [1.64122908E12, 11.633333333333333], [1.64122644E12, 7.083333333333333], [1.64122866E12, 11.65], [1.64122704E12, 9.2], [1.64122806E12, 11.533333333333333], [1.64122824E12, 11.583333333333334], [1.64122542E12, 3.8833333333333333], [1.64122602E12, 5.25], [1.64122764E12, 11.116666666666667], [1.64122926E12, 11.666666666666666], [1.641225E12, 3.1], [1.64122722E12, 9.966666666666667], [1.64122944E12, 11.683333333333334], [1.64122662E12, 6.883333333333334], [1.6412256E12, 4.216666666666667], [1.64122884E12, 11.65], [1.6412262E12, 5.9], [1.64122842E12, 11.4], [1.6412268E12, 8.466666666666667], [1.64122782E12, 11.283333333333333], [1.64122518E12, 3.433333333333333], [1.641228E12, 11.4], [1.64122902E12, 11.6], [1.64122578E12, 4.55], [1.6412274E12, 10.483333333333333], [1.64122698E12, 9.283333333333333], [1.6412292E12, 11.616666666666667], [1.64122638E12, 6.216666666666667], [1.64122536E12, 4.083333333333333], [1.6412286E12, 11.583333333333334], [1.64122596E12, 4.683333333333334], [1.64122818E12, 11.416666666666666], [1.64122656E12, 7.25], [1.64122758E12, 11.016666666666667], [1.64122494E12, 3.066666666666667], [1.64122776E12, 11.35], [1.64122938E12, 11.633333333333333], [1.64122878E12, 11.633333333333333], [1.64122554E12, 4.016666666666667], [1.64122716E12, 10.1], [1.64122614E12, 5.283333333333333], [1.64122896E12, 11.633333333333333], [1.64122512E12, 3.3833333333333333], [1.64122674E12, 8.316666666666666], [1.64122836E12, 11.583333333333334], [1.64122572E12, 4.033333333333333], [1.64122794E12, 11.15], [1.64122632E12, 5.716666666666667], [1.64122734E12, 10.45], [1.64122956E12, 3.8333333333333335], [1.64122692E12, 9.15], [1.64122752E12, 11.0], [1.64122914E12, 11.65], [1.64122854E12, 11.483333333333333], [1.6412253E12, 3.783333333333333]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.64122956E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 1.1, "minX": 1.64122488E12, "maxY": 11.683333333333334, "series": [{"data": [[1.64122872E12, 11.566666666666666], [1.6412259E12, 4.633333333333334], [1.64122488E12, 1.1], [1.6412265E12, 7.083333333333333], [1.64122812E12, 11.516666666666667], [1.64122548E12, 3.5833333333333335], [1.6412277E12, 11.133333333333333], [1.64122608E12, 5.35], [1.6412271E12, 10.0], [1.64122932E12, 11.65], [1.64122668E12, 8.216666666666667], [1.6412289E12, 11.6], [1.64122728E12, 10.316666666666666], [1.6412283E12, 11.45], [1.64122506E12, 3.25], [1.64122848E12, 11.533333333333333], [1.64122566E12, 4.016666666666667], [1.64122626E12, 6.033333333333333], [1.64122788E12, 11.3], [1.6412295E12, 11.65], [1.64122524E12, 3.7], [1.64122746E12, 10.733333333333333], [1.64122686E12, 8.55], [1.64122584E12, 4.683333333333334], [1.64122908E12, 11.633333333333333], [1.64122644E12, 7.083333333333333], [1.64122866E12, 11.65], [1.64122704E12, 9.2], [1.64122806E12, 11.533333333333333], [1.64122824E12, 11.583333333333334], [1.64122542E12, 3.8833333333333333], [1.64122602E12, 5.25], [1.64122764E12, 11.116666666666667], [1.64122926E12, 11.666666666666666], [1.641225E12, 3.1], [1.64122722E12, 9.966666666666667], [1.64122944E12, 11.683333333333334], [1.64122662E12, 6.883333333333334], [1.6412256E12, 4.216666666666667], [1.64122884E12, 11.65], [1.6412262E12, 5.9], [1.64122842E12, 11.4], [1.6412268E12, 8.466666666666667], [1.64122782E12, 11.283333333333333], [1.64122518E12, 3.433333333333333], [1.641228E12, 11.4], [1.64122902E12, 11.6], [1.64122578E12, 4.55], [1.6412274E12, 10.483333333333333], [1.64122698E12, 9.283333333333333], [1.6412292E12, 11.616666666666667], [1.64122638E12, 6.216666666666667], [1.64122536E12, 4.083333333333333], [1.6412286E12, 11.583333333333334], [1.64122596E12, 4.683333333333334], [1.64122818E12, 11.416666666666666], [1.64122656E12, 7.25], [1.64122758E12, 11.016666666666667], [1.64122494E12, 3.066666666666667], [1.64122776E12, 11.35], [1.64122938E12, 11.633333333333333], [1.64122878E12, 11.633333333333333], [1.64122554E12, 4.016666666666667], [1.64122716E12, 10.1], [1.64122614E12, 5.283333333333333], [1.64122896E12, 11.633333333333333], [1.64122512E12, 3.3833333333333333], [1.64122674E12, 8.316666666666666], [1.64122836E12, 11.583333333333334], [1.64122572E12, 4.033333333333333], [1.64122794E12, 11.15], [1.64122632E12, 5.716666666666667], [1.64122734E12, 10.45], [1.64122956E12, 3.8333333333333335], [1.64122692E12, 9.15], [1.64122752E12, 11.0], [1.64122914E12, 11.65], [1.64122854E12, 11.483333333333333], [1.6412253E12, 3.783333333333333]], "isOverall": false, "label": "Create User-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.64122956E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 1.1, "minX": 1.64122488E12, "maxY": 11.683333333333334, "series": [{"data": [[1.64122872E12, 11.566666666666666], [1.6412259E12, 4.633333333333334], [1.64122488E12, 1.1], [1.6412265E12, 7.083333333333333], [1.64122812E12, 11.516666666666667], [1.64122548E12, 3.5833333333333335], [1.6412277E12, 11.133333333333333], [1.64122608E12, 5.35], [1.6412271E12, 10.0], [1.64122932E12, 11.65], [1.64122668E12, 8.216666666666667], [1.6412289E12, 11.6], [1.64122728E12, 10.316666666666666], [1.6412283E12, 11.45], [1.64122506E12, 3.25], [1.64122848E12, 11.533333333333333], [1.64122566E12, 4.016666666666667], [1.64122626E12, 6.033333333333333], [1.64122788E12, 11.3], [1.6412295E12, 11.65], [1.64122524E12, 3.7], [1.64122746E12, 10.733333333333333], [1.64122686E12, 8.55], [1.64122584E12, 4.683333333333334], [1.64122908E12, 11.633333333333333], [1.64122644E12, 7.083333333333333], [1.64122866E12, 11.65], [1.64122704E12, 9.2], [1.64122806E12, 11.533333333333333], [1.64122824E12, 11.583333333333334], [1.64122542E12, 3.8833333333333333], [1.64122602E12, 5.25], [1.64122764E12, 11.116666666666667], [1.64122926E12, 11.666666666666666], [1.641225E12, 3.1], [1.64122722E12, 9.966666666666667], [1.64122944E12, 11.683333333333334], [1.64122662E12, 6.883333333333334], [1.6412256E12, 4.216666666666667], [1.64122884E12, 11.65], [1.6412262E12, 5.9], [1.64122842E12, 11.4], [1.6412268E12, 8.466666666666667], [1.64122782E12, 11.283333333333333], [1.64122518E12, 3.433333333333333], [1.641228E12, 11.4], [1.64122902E12, 11.6], [1.64122578E12, 4.55], [1.6412274E12, 10.483333333333333], [1.64122698E12, 9.283333333333333], [1.6412292E12, 11.616666666666667], [1.64122638E12, 6.216666666666667], [1.64122536E12, 4.083333333333333], [1.6412286E12, 11.583333333333334], [1.64122596E12, 4.683333333333334], [1.64122818E12, 11.416666666666666], [1.64122656E12, 7.25], [1.64122758E12, 11.016666666666667], [1.64122494E12, 3.066666666666667], [1.64122776E12, 11.35], [1.64122938E12, 11.633333333333333], [1.64122878E12, 11.633333333333333], [1.64122554E12, 4.016666666666667], [1.64122716E12, 10.1], [1.64122614E12, 5.283333333333333], [1.64122896E12, 11.633333333333333], [1.64122512E12, 3.3833333333333333], [1.64122674E12, 8.316666666666666], [1.64122836E12, 11.583333333333334], [1.64122572E12, 4.033333333333333], [1.64122794E12, 11.15], [1.64122632E12, 5.716666666666667], [1.64122734E12, 10.45], [1.64122956E12, 3.8333333333333335], [1.64122692E12, 9.15], [1.64122752E12, 11.0], [1.64122914E12, 11.65], [1.64122854E12, 11.483333333333333], [1.6412253E12, 3.783333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.64122956E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

